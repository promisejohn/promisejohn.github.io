<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Promise John]]></title>
  <subtitle><![CDATA[My Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://promisejohn.github.io//"/>
  <updated>2015-06-13T07:06:01.239Z</updated>
  <id>http://promisejohn.github.io//</id>
  
  <author>
    <name><![CDATA[promise john]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://promisejohn.github.io/2015/06/13/HelloHexo/"/>
    <id>http://promisejohn.github.io/2015/06/13/HelloHexo/</id>
    <published>2015-06-13T07:06:01.239Z</published>
    <updated>2015-06-13T07:06:01.239Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 'hexo g' for short</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy <span class="comment"># 'hexo d' for short</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="Useful_hexo_plugins">Useful hexo plugins</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>
<h3 id="Put_the_whole_source_folder_into_git">Put the whole source folder into git</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;# Dependency directory&#10;node_modules&#10;# hexo generated files, deployed to github.io pages&#10;public&#10;.deploy_git&#10;...</span><br></pre></td></tr></table></figure>
<h3 id="Some_notes_about_doc_syntax">Some notes about doc syntax</h3><ol>
<li>use <code>&lt;!-- more --&gt;</code> to hide blog details below.</li>
<li>use <code>toc: false</code> to hide the topic menu about the blog.</li>
<li>use <code>mathjax: true</code> to enable LaTex math prents.</li>
</ol>
<h3 id="Awsome_markdown_editors:">Awsome markdown editors:</h3><ul>
<li>vim, sublimetext, …</li>
<li><a href="http://25.io/mou/" target="_blank" rel="external"><strong>Mou</strong></a></li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="external"><strong>MacDown</strong></a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
      <category term="hexo" scheme="http://promisejohn.github.io/tags/hexo/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HelloHadoop]]></title>
    <link href="http://promisejohn.github.io/2015/05/30/HelloHadoop/"/>
    <id>http://promisejohn.github.io/2015/05/30/HelloHadoop/</id>
    <published>2015-05-30T09:58:33.000Z</published>
    <updated>2015-06-13T07:06:01.239Z</updated>
    <content type="html"><![CDATA[<h1 id="Hadoop系列">Hadoop系列</h1><p>大数据依旧在热炒，hadoop虽然不是唯一的代表，却也是各家必谈之资本，玩玩大数据。</p>
<h2 id="通过ambari部署hadoop集群">通过ambari部署hadoop集群</h2><p>在cloudlab119-123上部署集群，其中119作为ambari server控制端。</p>
<p>安装部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/yum.repo.d</span><br><span class="line">$ wget http://public-repo-<span class="number">1</span>.hortonworks.com/ambari/centos6/<span class="number">2</span>.x/updates/<span class="number">2.0</span>.<span class="number">0</span>/ambari.repo</span><br><span class="line">$ yum install -y ambari-server</span><br><span class="line">$ ambari-server setup <span class="comment"># 按指示操作即可</span></span><br><span class="line">$ ambari-server start <span class="comment"># *:8080端口</span></span><br></pre></td></tr></table></figure>
<p>配置，打开<a href="http://cloudlab119:8080，默认密码admin:admin。在cloudlab119上对所有节点做免密码认证：" target="_blank" rel="external">http://cloudlab119:8080，默认密码admin:admin。在cloudlab119上对所有节点做免密码认证：</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/hosts</span><br><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span> <span class="operator">-f</span> ~/.ssh/hadoop119</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">119</span>,<span class="number">120</span>,<span class="number">121</span>,<span class="number">122</span>,<span class="number">123</span>&#125;; <span class="keyword">do</span> ssh-copy-id -i ~/.ssh/hadoop119.pub root@cloudlab<span class="variable">$i</span>; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>按提示建议操作，如ntpd、iptables、关闭THP：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chkconfig ntpd on</span><br><span class="line">$ service ntpd start</span><br><span class="line">$ service iptables stop <span class="comment"># 生产环境中参照文档把对应端口打开</span></span><br><span class="line">$ chkconfig iptables off</span><br><span class="line">$ <span class="built_in">echo</span> never &gt; /sys/kernel/mm/redhat_transparent_hugepage/enabled <span class="comment"># 关闭THP，如果提示文件系统readonly，重启机器再执行</span></span><br></pre></td></tr></table></figure>
<p>按提示一步步操作即可，但中间如果出现下载包失败，则会导致整个安装失败，所以最好提前把官方源同步到本地，做镜像后安装。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-utils createrepo</span><br><span class="line">$ mkdir -p /var/www/html/ambari/centos6 &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ reposync -r Updates-ambari-<span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">$ createrepo Updates-ambari-<span class="number">2.0</span>.<span class="number">0</span></span><br><span class="line">$ mkdir -p /var/www/html/hdp/centos6 &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ reposync -r HDP-<span class="number">2.2</span></span><br><span class="line">$ reposync -r HDP-UTILS-<span class="number">1.1</span>.<span class="number">0.20</span></span><br><span class="line">$ createrepo HDP-<span class="number">2.2</span></span><br><span class="line">$ createrepo HDP-UTILS-<span class="number">1.1</span>.<span class="number">0.20</span></span><br><span class="line">$ vim /etc/yum.repo.d/ambari.repo <span class="comment"># 修改baseurl指向本地镜像</span></span><br></pre></td></tr></table></figure>
<p>安装之后，发现某几台服务器内存占用率非常高，可以通过Ambari增加Host节点，然后迁移部分的组件到新的机器。</p>
<h2 id="通过Docker部署集群">通过Docker部署集群</h2><p>可以自己做docker image，简单起见可以先用sequenceiq的image。</p>
<p>单节点测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull sequenceiq/hadoop-docker:<span class="number">2.7</span>.<span class="number">0</span></span><br><span class="line">$ docker run -it sequenceiq/hadoop-docker:<span class="number">2.7</span>.<span class="number">0</span> /etc/bootstrap.sh -bash</span><br><span class="line">$ <span class="built_in">cd</span> <span class="variable">$HADOOP_PREFIX</span> <span class="comment"># /usr/local/hadoop</span></span><br><span class="line">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-<span class="number">2.7</span>.<span class="number">0</span>.jar grep input output <span class="string">'dfs[a-z.]+'</span> <span class="comment"># 统计key出现次数</span></span><br><span class="line">$ bin/hdfs dfs -cat output/* <span class="comment"># 在用户Home下的output下</span></span><br></pre></td></tr></table></figure>
<p>多节点部署，可以用ambari镜像，准备好blueprint.json：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &#34;host_groups&#34; : [&#10;    &#123; &#34;name&#34; : &#34;host_group_1&#34;,&#10;      &#34;components&#34; : [&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_SERVER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;AMBARI_SERVER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;HDFS_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;NODEMANAGER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;MAPREDUCE2_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;APP_TIMELINE_SERVER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;DATANODE&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;YARN_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;RESOURCEMANAGER&#34; &#125; ],&#10;      &#34;cardinality&#34; : &#34;1&#34; &#125;,&#10;    &#123; &#34;name&#34; : &#34;host_group_2&#34;,&#10;      &#34;components&#34; : [&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_SERVER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;SECONDARY_NAMENODE&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;NODEMANAGER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;YARN_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;DATANODE&#34; &#125;],&#10;      &#34;cardinality&#34; : &#34;1&#34; &#125;,&#10;    &#123; &#34;name&#34; : &#34;host_group_3&#34;,&#10;      &#34;components&#34; : [&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_SERVER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;ZOOKEEPER_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;NAMENODE&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;NODEMANAGER&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;YARN_CLIENT&#34; &#125;,&#10;        &#123; &#34;name&#34; : &#34;DATANODE&#34; &#125;],&#10;      &#34;cardinality&#34; : &#34;1&#34; &#125; ],&#10;  &#34;Blueprints&#34; : &#123;&#10;    &#34;blueprint_name&#34; : &#34;blueprint-c1&#34;,&#10;    &#34;stack_name&#34; : &#34;HDP&#34;,&#10;    &#34;stack_version&#34; : &#34;2.2&#34; &#125; &#125;</span><br></pre></td></tr></table></figure>
<p>可以在ambari server上查找：<code>http://172.17.0.13:8080/api/v1/blueprints</code>。</p>
<p>创建集群：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull sequenceiq/ambari:<span class="number">1.7</span>.<span class="number">0</span></span><br><span class="line">$ curl -Lo .amb https://github.com/sequenceiq/docker-ambari/raw/master/ambari-functions &amp;&amp; . .amb</span><br><span class="line">$ amb-start-cluster <span class="number">3</span> <span class="comment"># 注意默认使用的是sequenceiq/ambari:1.7.0-warmup，可以修改 .amb</span></span><br><span class="line">$ amb-shell <span class="comment"># 又启了个container</span></span><br><span class="line">ambshell &gt; host list</span><br><span class="line">ambshell &gt; blueprint add --url http://<span class="number">172.17</span>.<span class="number">42.1</span>/bp.json <span class="comment"># 准备好json保存到某个能访问的http服务器</span></span><br><span class="line">ambshell &gt; cluster build --blueprint blueprint-c1</span><br><span class="line">ambshell &gt; cluster assign --hostGroup host_group_1 --host amb0.mycorp.kom</span><br><span class="line">ambshell &gt; cluster assign --hostGroup host_group_2 --host amb1.mycorp.kom</span><br><span class="line">ambshell &gt; cluster assign --hostGroup host_group_3 --host amb2.mycorp.kom</span><br><span class="line">ambshell &gt; blueprint show --id blueprint-c1</span><br><span class="line">ambshell &gt; cluster preview</span><br><span class="line">ambshell &gt; cluster create</span><br></pre></td></tr></table></figure>
<p>中间安装过程如果出现失败，可以到ambari-server上看详细情况，当然也可以直接向之前方式一样，通过GUI安装部署；或者开着浏览器看amb-shell执行过程。<br>如果实在VM上远程使用，可以在docker所在机器上做NAT映射直接访问：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -t nat -A PREROUTING <span class="operator">-d</span> <span class="number">10.101</span>.<span class="number">29.26</span> -p tcp --dport <span class="number">8000</span> -j DNAT --to-destination <span class="number">172.17</span>.<span class="number">0.20</span>:<span class="number">8080</span> <span class="comment"># 可以用端口转发直接远程浏览器访问</span></span><br></pre></td></tr></table></figure>
<p>做个简单的测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it <span class="number">9572938</span>bb253 /bin/bash <span class="comment"># 进入到容器内</span></span><br><span class="line">bash <span class="comment"># su hdfs # 切换到HDFS的超级用户</span></span><br><span class="line">bash <span class="comment"># hdfs dfsadmin -report</span></span><br><span class="line">bash <span class="comment"># hdfs dfs -ls /</span></span><br></pre></td></tr></table></figure>
<h2 id="HDFS">HDFS</h2><p>HDFS由NameNode、SNameNode和DataNode组成，HA的时候还有另一个NameNode（StandBy）。SNameNode专门从NameNode获取FSImage和Edits，为NameNode合并生成新的FSImage。</p>
<p>HDFS有个超级用户，就是启动NameNode的那个linux账号。</p>
<h3 id="基本Shell操作">基本Shell操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ ps -elf | grep NameNode <span class="comment">#看看哪个账号启动了NameNode，那个账号就是超级用户</span></span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">'hadoop fs -ls /'</span> hdfs <span class="comment">#使用超级账号执行命令</span></span><br><span class="line">$ su hdfs <span class="comment">#切换到超级账号</span></span><br><span class="line">$ useradd -G hdfs promise</span><br><span class="line">$ hdfs dfs -mkdir /user/promise</span><br><span class="line">$ hdfs dfs -chown promise:hdfs /user/promise</span><br><span class="line">$ hdfs dfs -ls /user/</span><br><span class="line">$ hdfs dfs -mkdir -p /user/promise/dev/hello</span><br><span class="line">$ hdfs dfs -chmod -R <span class="number">777</span> /user/promise/dev</span><br><span class="line">$ hdfs dfs -ls /user/promise/dev/</span><br><span class="line">$ <span class="built_in">echo</span> “helloworld” &gt; hello.txt</span><br><span class="line">$ hdfs dfs -put hello.txt /user/promise/helloworld.txt</span><br><span class="line">$ hdfs dfs -put - hdfs://<span class="number">192.168</span>.<span class="number">182.119</span>/user/promise/test.txt <span class="comment"># 从stdin输入，Ctrl-D结束</span></span><br><span class="line">$ hdfs dfs -cat hdfs://<span class="number">192.168</span>.<span class="number">182.119</span>/user/promise/test.txt</span><br><span class="line">$ hdfs dfs -cat /user/promise/helloworld.txt</span><br><span class="line">$ hdfs dfs -get /user/promise/helloworld.txt hello2.txt</span><br><span class="line">$ hdfs dfs -tail <span class="operator">-f</span> /user/promise/helloworld.txt <span class="comment"># 查看追加的文件写入</span></span><br><span class="line">$ hdfs dfs -appendToFile - /user/promise/helloworld.txt</span><br></pre></td></tr></table></figure>
<h3 id="webhdfs操作">webhdfs操作</h3><p>启用了webhdfs之后（<code>hdfs-site</code>中<code>dfs.webhdfs.enabled=true</code>），可以通过HTTP方式访问HDFS：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i <span class="string">"http://192.168.182.119:50070/webhdfs/v1/user/promise/?op=LISTSTATUS"</span></span><br><span class="line">$ curl -i -L <span class="string">"http://192.168.182.119:50070/webhdfs/v1/user/promise/helloworld.txt?op=OPEN"</span> <span class="comment"># 通过重定向到DataNode获取文件</span></span><br><span class="line">$ curl -i -X PUT <span class="string">"http://192.168.182.119:50070/webhdfs/v1/user/promise/hello?user.name=promise&amp;op=MKDIRS"</span></span><br></pre></td></tr></table></figure>
<p>通过HTTP方式创建和追加文件都需要通过2阶段实现：先在NameNode上创建，获得DataNode URI后再向URI上传文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i -X PUT <span class="string">"http://192.168.182.119:50070/webhdfs/v1/user/promise/hello/hi.txt?op=CREATE"</span></span><br><span class="line">$ curl -i -X PUT -T hi.txt <span class="string">"http://192.168.182.119:50075/webhdfs/v1/user/promise/hello/hi.txt?user.name=promise&amp;op=CREATE&amp;namenoderpcaddress=192.168.182.119:8020&amp;overwrite=false"</span> <span class="comment"># 需要声明账号</span></span><br></pre></td></tr></table></figure>
<h3 id="查看离线的FSImage和Edits：">查看离线的FSImage和Edits：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs oiv -p XML -i /hadoop/hdfs/namenode/current/fsimage_0000000000000018887 -o fsimage.xml <span class="comment"># 生成XML格式</span></span><br><span class="line">$ hdfs oiv  -i /hadoop/hdfs/namenode/current/fsimage_0000000000000018887 <span class="comment"># 在线查看形式</span></span><br><span class="line">$ hdfs dfs -ls webhdfs://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5978</span>/</span><br><span class="line">$ hdfs oev -i /hadoop/hdfs/namenode/current/edits_0000000000000000001-<span class="number">0000000000000005150</span> -o edits.xml <span class="comment"># 查看edits</span></span><br></pre></td></tr></table></figure>
<h3 id="使用Java_API">使用Java API</h3><p>Java在大型软件系统开发中有利于更清晰的架构设计和团队分工，而且有大量的第三方优质框架可用；可惜在命令里写HelloWorld很啰嗦，方便起见，直接用maven生成基本文件结构。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/apache-maven-<span class="number">3.3</span>.<span class="number">3</span>/bin/</span><br><span class="line">$ <span class="built_in">export</span> JAVA_HOME=/usr/jdk64/jdk1.<span class="number">7.0</span>_67/</span><br><span class="line">$ <span class="built_in">export</span> MAVEN_OPTS=<span class="string">"-Xms256m -Xmx512m"</span></span><br><span class="line">$ mkdir ~/dev &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ mvn archetype:generate -DgroupId=org.tecstack -DartifactId=hellohdfs -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=<span class="literal">false</span></span><br><span class="line">$ <span class="built_in">cd</span> hellohdfs &amp;&amp; mvn package</span><br><span class="line">$ vim ./src/main/java/org/tecstack/App.java</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.tecstack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileStatus;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Hello HDFS</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">                Configuration conf=<span class="keyword">new</span> Configuration();</span><br><span class="line">                FileSystem hdfs=FileSystem.get(conf);</span><br><span class="line">                Path dst =<span class="keyword">new</span> Path(<span class="string">"/user/promise/helloworld.txt"</span>);</span><br><span class="line">                FileStatus files[]=hdfs.listStatus(dst);</span><br><span class="line">                <span class="keyword">for</span>(FileStatus file:files) &#123;</span><br><span class="line">                    System.out.println(file.getPath());</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>pom.xml</code>增加hadoop依赖包:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">project</span> <span class="attribute">xmlns</span>=<span class="value">"http://maven.apache.org/POM/4.0.0"</span> <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">  <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="title">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.tecstack<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hellohdfs<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="title">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hellohdfs<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hadoop-common<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hadoop-hdfs<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="title">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>打包运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br><span class="line">$ mkdir -p src/main/resources</span><br><span class="line">$ scp cloudlab119:/etc/hadoop/conf/core-site.xml src/main/resources</span><br><span class="line">$ mvn <span class="built_in">exec</span>:java -Dexec.mainClass=<span class="string">"org.tecstack.App"</span> -Dexec.cleanupDaemonThreads=<span class="literal">false</span></span><br><span class="line">$ mvn dependency:copy-dependencies <span class="comment"># 导出依赖的包</span></span><br><span class="line">$ mvn resources:resources <span class="comment"># 导出资源</span></span><br><span class="line">$ mvn eclipse:eclipse <span class="comment"># 生成eclipse工程文件，.project, .classpath</span></span><br></pre></td></tr></table></figure>
<p>关于maven的exec插件，也可以通过配置<code>pom.xml</code>的plugin的参数简化执行：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="title">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="title">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="title">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="title">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">mainClass</span>&gt;</span>org.tecstack.App<span class="tag">&lt;/<span class="title">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">cleanupDaemonThreads</span>&gt;</span>false<span class="tag">&lt;/<span class="title">cleanupDaemonThreads</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">plugin</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后运行只需要<code>mvn exec:java</code>，如果需要定制更多参数，比如JVM内存，单独启动进程执行等，可以使用<code>exec:exec</code>插件，具体看[codehaus官网][<a href="http://mojo.codehaus.org/exec-maven-plugin/usage.html]。" target="_blank" rel="external">http://mojo.codehaus.org/exec-maven-plugin/usage.html]。</a></p>
<h2 id="HUE交互界面">HUE交互界面</h2><p>Hue是一个基于Django开发的webapp，通过WebHDFS或HttpFS的一种访问HDFS的数据，在HDFS HA部署方式中只能使用HttpFS。<br>如通过WebHDFS方式访问，需要修改<code>hdfs-site.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>core-site.xml</code>使Hue账号可以代理其他用户：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.proxyuser.hue.hosts<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.proxyuser.hue.groups<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改完参数需要重新启动HDFS，通过Ambari操作很方便。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y hue hue-server</span><br><span class="line">$ vim /etc/hue/conf/hue.ini <span class="comment"># 修改各个服务的URI，可以通过Ambari看到服务所在的服务器位置；修改默认监听端口不与其它冲突</span></span><br><span class="line">$ service hue start</span><br></pre></td></tr></table></figure>
<p>默认登陆账号为<code>admin:admin</code>，可以通过hdfs为该账号创建一个专用的文件夹<code>/user/hue</code>进行测试，正式环境中可以考虑与其他身份系统对接。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su hdfs</span><br><span class="line">$ hdfs dfs -mkdir /user/hue</span><br><span class="line">$ hdfs dfs -chown -R admin:hadoop  /user/hue</span><br><span class="line">$ hdfs dfs -ls /user/</span><br></pre></td></tr></table></figure>
<h2 id="导入数据到HBase">导入数据到HBase</h2><p>通过hcat建立数据库表结构，通过pig导入数据。</p>
<p>建立数据文件<code>data.tsv</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">row1    c1    c2&#10;row2    c1    c2&#10;row3    c1    c2&#10;row4    c1    c2&#10;row5    c1    c2&#10;row6    c1    c2&#10;row7    c1    c2&#10;row8    c1    c2&#10;row9    c1    c2&#10;row10    c1    c2</span><br></pre></td></tr></table></figure>
<p>准备建表DDL，<code>simple.ddl</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE simple_hcat_load_table (id STRING, c1 STRING, c2 STRING)&#10;STORED BY &#39;org.apache.hadoop.hive.hbase.HBaseStorageHandler&#39;&#10;WITH SERDEPROPERTIES ( &#39;hbase.columns.mapping&#39; = &#39;d:c1,d:c2&#39; )&#10;TBLPROPERTIES (&#10;&#39;hbase.table.name&#39; = &#39;simple_hcat_load_table&#39;&#10;);</span><br></pre></td></tr></table></figure>
<p>准备导入脚本，<code>simple.bulkload.pig</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A = LOAD &#39;hdfs:///tmp/data.tsv&#39; USING PigStorage(&#39;\t&#39;) AS (id:chararray, c1:chararray, c2:chararray);&#10;-- DUMP A;&#10;STORE A INTO &#39;hbase://simple_hcat_load_table&#39; USING org.apache.hive.hcatalog.pig.HCatStorer();</span><br></pre></td></tr></table></figure>
<p>把文件放到HDFS，建表，导入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ su - hdfs</span><br><span class="line">$ hdfs dfs -put data.tsv /tmp/</span><br><span class="line">$ hcat <span class="operator">-f</span> simple.ddl</span><br><span class="line">$ pig -useHCatalog simple.bulkload.pig</span><br></pre></td></tr></table></figure>
<p>通过Hue的HCat可以查看数据库和表数据，也可以通过HBase Shell：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ su - hdfs</span><br><span class="line">$ hbase shell</span><br><span class="line">hbase &gt; list <span class="comment"># 查询所有表</span></span><br><span class="line">hbase &gt; scan <span class="string">'simple_hcat_load_table'</span> <span class="comment"># 查询所有数据</span></span><br><span class="line">hbase &gt; describe <span class="string">'simple_hcat_load_table'</span></span><br></pre></td></tr></table></figure>
<p>也可以通过Hive Shell：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ su - hdfs</span><br><span class="line">$ hive</span><br><span class="line">hive &gt; show tables;</span><br><span class="line">hive &gt; select count(*) from simple_hcat_load_table;</span><br><span class="line">hive &gt; desc simple_hcat_load_table;</span><br></pre></td></tr></table></figure>
<p>如果建表过程中出现类似<code>java.lang.NoClassDefFoundError: org/apache/hadoop/hbase/HBaseConfiguration</code>如下的找不到类情况，检查hcat的配置文件是否有HBase目录：<code>vim /usr/bin/hcat</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">export</span> HBASE_HOME=/usr/hdp/<span class="number">2.2</span>.<span class="number">4.2</span>-<span class="number">2</span>/hbase</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>此外，由于Hue集成的HCat调用的是Hive下的hcat，需要在<code>/etc/hive-hcatalog/conf/hcat-env.sh</code>中指定<code>HBASE_HOME</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">HBASE_HOME=<span class="variable">$&#123;HBASE_HOME:-/usr/hdp/current/hbase-client&#125;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>pig在使用MapReduce模式执行时，可以根据log打开MR Job跟踪，如果也出现<code>java.lang.NoClassDefFoundError</code>类错误，说明mapreduce服务的classpath有缺漏，可以通过Ambari修改MapReduce服务<code>Advanced mapred-site</code>配置中的<code>mapreduce.application.classpath</code>，比如出现HBase相关类找不到，则添加HBase相关的库<code>/usr/hdp/2.2.4.2-2/hbase/lib/*</code>，然后重启MapReduce服务即可。</p>
<p>如果出现执行权限错误，需要检查如下配置是否存在：<br><code>hive-site.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.security.metastore.authorization.manager<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider</span><br><span class="line"><span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.security.metastore.authenticator.manager<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator</span><br><span class="line"><span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.metastore.pre.event.listeners<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener</span><br><span class="line"><span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hive.metastore.execute.setugi<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>true<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>webhcat-site.xml</code>:<br>正式环境中可以明确具体使用的账号名称，最小化权限。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>webhcat.proxyuser.hue.hosts<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>webhcat.proxyuser.hue.groups<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>core-site.xml</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.proxyuser.hcat.group<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.proxyuser.hcat.hosts<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">value</span>&gt;</span>*<span class="tag">&lt;/<span class="title">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用小结">使用小结</h2><p>Hadoop系架构经过引入YARN，真正实现了数据和应用的分离，在YARN架构上可以实现出了原来的MapReduce之外的更多App，比如流式处理、实时处理、图计算等，如此可以真正实现“把应用挪到数据旁边高效执行”，构建大数据平台。此外，做数据分析时可以发现周边工具很丰富，比如hue统一的综合管理界面、从数据文件识别结构并管理数据的hcat、数据处理高级语言pig、支持SQL的Hive，使得在Hadoop平台上做数据分析非常方便（可以参考<a href="http://zh.hortonworks.com/hadoop-tutorial/hello-world-an-introduction-to-hadoop-hcatalog-hive-and-pig/" title="hcat &amp; hive &amp; pig" target="_blank" rel="external">这里</a>）。<br>另外，对比YARN利用OS进程隔离分配资源之外，<a href="http://mesos.apache.org/" title="Apache Mesos" target="_blank" rel="external">Mesos</a>结合了Container技术实现容器隔离分配资源，以此实现更通用的框架（用各种语言写的各种计算框架）。当然YARN也进入了<a href="http://hadoop.apache.org/docs/r2.7.0/hadoop-yarn/hadoop-yarn-site/DockerContainerExecutor.html" title="YARN DCE" target="_blank" rel="external">DCE</a>，通过docker实现容器隔离。不过正式应用还是有待Linux kernel本身功能的成熟，以及docker之类管理工具的完善。<br>最后，数据处理优选python scikit-learn系工具，当大到一定程度，或需要多人同时工作时，hadoop系平台是个不错的选择。</p>
<h2 id="参考">参考</h2><ol>
<li><a href="http://docs.hortonworks.com/HDPDocuments/Ambari-2.0.0.0/Ambari_Doc_Suite/ADS_v200.html" title="Ambari Official Docs" target="_blank" rel="external">Ambari Official Docs</a></li>
<li><a href="http://hadoop.apache.org/docs/stable2/hadoop-project-dist/hadoop-common/FileSystemShell.html" title="HDFS Official Doc" target="_blank" rel="external">HDFS Official Doc</a></li>
<li><a href="https://github.com/sequenceiq/hadoop-docker" title="hadoop-docker ffrom sequenceiq" target="_blank" rel="external">Hadoop-docker from sequenceiq</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/AMBARI/Blueprints#Blueprints-Step1:CreateBlueprint" title="Ambari docs on apache" target="_blank" rel="external">Ambari Docs on Apache</a></li>
<li><a href="https://blog.codecentric.de/en/2014/05/lambda-cluster-provisioning/" title="Sample Blueprint" target="_blank" rel="external">Sample BluePrint</a></li>
<li><a href="http://ju.outofmemory.cn/entry/128881" title="安装配置Hue" target="_blank" rel="external">安装配置Hue</a></li>
<li><a href="http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.2.4/HDP_Man_Install_v224/index.html" title="手动安装HDP" target="_blank" rel="external">手动安装HDP</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/AMBARI/Blueprints" title="Ambari Blueprint" target="_blank" rel="external">Ambari Blueprint</a></li>
<li><a href="http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.2.4/Importing_Data_HBase_v224/index.html" title="导入数据到HBase" target="_blank" rel="external">导入数据到HBase</a></li>
<li><a href="http://mesos.apache.org/" title="Apache Mesos" target="_blank" rel="external">Apache Mesos</a></li>
<li><a href="http://hadoop.apache.org/docs/r2.7.0/hadoop-yarn/hadoop-yarn-site/DockerContainerExecutor.html" title="YARN DCE" target="_blank" rel="external">YARN DCE</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Hadoop系列">Hadoop系列</h1><p>大数据依旧在热炒，hadoop虽然不是唯一的代表，却也是各家必谈之资本，玩玩大数据。</p>
<h2 id="通过ambari部署hadoop集群">通过ambari部署hadoop集群</h2><p>在clou]]>
    </summary>
    
      <category term="ambari" scheme="http://promisejohn.github.io/tags/ambari/"/>
    
      <category term="hadoop" scheme="http://promisejohn.github.io/tags/hadoop/"/>
    
      <category term="hdfs" scheme="http://promisejohn.github.io/tags/hdfs/"/>
    
      <category term="hue" scheme="http://promisejohn.github.io/tags/hue/"/>
    
      <category term="java" scheme="http://promisejohn.github.io/tags/java/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HelloDocker]]></title>
    <link href="http://promisejohn.github.io/2015/05/13/HelloDocker/"/>
    <id>http://promisejohn.github.io/2015/05/13/HelloDocker/</id>
    <published>2015-05-13T07:56:19.000Z</published>
    <updated>2015-06-13T07:06:01.239Z</updated>
    <content type="html"><![CDATA[<h1 id="Docker概述">Docker概述</h1><p>Docker是基于Go语言开发的容器管理工具，而且抽象级别比lxc这些管理工具高，目前官方默认通过libcontainer管理容器。lxc是一些kernel patch（namespaces）和userspace tool（cgroup）的集合，通过cgroup这个用户态管理工具实现对隔离资源的管理。Docker相比LXC增加了镜像服务（通过UnionFS和DeviceMapper），同时简化了操作复杂度，可以很方便实现应用分发部署，甚至是扩容。目前也有一些周边管理工具（Compose、Flocker、weaver）在创新，在docker基础上实现更多实用功能，如迁移，流程编排，网络管理等。跟openstack相比，docker更年轻，也更轻量级，但两者在某些场景下又可以很好结合起来，比如通过docker将openstack的管理节点实现高可用、可扩展。</p>
<p>docker的部署在发行版上比较简单，但对内核版本有不同要求，比如在centos6.5上要求内核版本至少2.6.32-431。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y docker-io</span><br><span class="line">$ chkconfig docker on</span><br><span class="line">$ service docker start</span><br><span class="line">$ docker run -it ubuntu /bin/bash</span><br><span class="line">$ docker info <span class="comment">#查看docker信息</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker基本用法">Docker基本用法</h2><h3 id="基本命令使用：">基本命令使用：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ docker run ubuntu:<span class="number">14.04</span> /bin/<span class="built_in">echo</span> <span class="string">'Hello world'</span></span><br><span class="line">$ docker run <span class="operator">-d</span> ubuntu:<span class="number">14.04</span> /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span> <span class="comment"># 后台运行</span></span><br><span class="line">$ docker ps <span class="operator">-a</span></span><br><span class="line">$ docker logs instance_name</span><br><span class="line">$ docker logs <span class="operator">-f</span> instance_name <span class="comment"># 持续输出</span></span><br><span class="line">$ docker stop/start/restart instance_name <span class="comment"># stop容器后还能启动，但网络信息会变</span></span><br><span class="line">$ docker ps -aq | xargs docker rm <span class="comment"># 删除所有容器，运行中的会保留</span></span><br><span class="line">$ docker images ＃ -tree参数可以看层级关系，最大<span class="number">128</span>层</span><br><span class="line">$ docker save -o ubuntu.tar ubuntu:<span class="number">14.04</span> <span class="comment"># 把镜像保存到本地</span></span><br><span class="line">$ tar -tf ubuntu.tar <span class="comment"># 可以看到image的结构，包含了多层FS</span></span><br><span class="line">$ docker rmi ubuntu</span><br><span class="line">$ docker run <span class="operator">-d</span> -P training/webapp python app.py <span class="comment"># 映射所有端口</span></span><br><span class="line">$ docker port instance_name <span class="number">5000</span> <span class="comment">#查看被映射的端口</span></span><br><span class="line">$ docker run <span class="operator">-d</span> -p <span class="number">5000</span>:<span class="number">5000</span> training/webapp python app.py <span class="comment"># 映射5000端口</span></span><br><span class="line">$ docker run <span class="operator">-d</span> -p <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">5000</span>:<span class="number">5000</span>/udp training/webapp python app.py <span class="comment"># 映射本机UDP端口</span></span><br><span class="line">$ docker top instance_name</span><br><span class="line">$ docker inspect instance_name <span class="comment"># 查看容器配置</span></span><br><span class="line">$ docker inspect <span class="operator">-f</span> <span class="string">'&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;'</span> instance_name <span class="comment"># 查看具体的配置信息，如IP</span></span><br><span class="line">$ docker pull centos</span><br><span class="line">$ docker commit -m <span class="string">"some modify hints"</span> <span class="operator">-a</span> <span class="string">"author info"</span> </span><br><span class="line">contain_id repo_name/image_name:tags</span><br><span class="line">$ docker tag container_id repo_name/image_name:tags</span><br><span class="line">$ docker <span class="built_in">exec</span> -it CONTAINER_NAME /bin/bash <span class="comment"># 1.3开始支持在运行的容器内执行命令</span></span><br></pre></td></tr></table></figure>
<h3 id="使用Dockerfile创建image">使用Dockerfile创建image</h3><p><code>mkdir myimage &amp;&amp; cd $_ &amp;&amp; vim Dockerfile</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># This is a comment&#10;FROM ubuntu:14.04&#10;MAINTAINER Promise John &#60;promise.jon@gmail.com&#62;&#10;RUN apt-get update &#38;&#38; apt-get install -y nginx</span><br></pre></td></tr></table></figure>
<h3 id="使用Linking">使用Linking</h3><p>Docker主要通过环境变量和<code>/etc/hosts</code>文件来提供访问途径：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="operator">-d</span> --name db training/postgres</span><br><span class="line">$ docker run <span class="operator">-d</span> -P --name web --link db:db training/webapp python app.py</span><br><span class="line">$ docker inspect <span class="operator">-f</span> <span class="string">"&#123;&#123; .Name &#125;&#125;"</span> instance_id <span class="comment"># 查看容器名</span></span><br><span class="line">$ docker inspect <span class="operator">-f</span> <span class="string">"&#123;&#123; .HostConfig.Links &#125;&#125;"</span> web</span><br><span class="line">$ docker run --rm --name web2 --link db:db training/webapp env</span><br><span class="line">$ docker run --rm --name web2 --link db:db training/webapp cat /etc/hosts</span><br></pre></td></tr></table></figure>
<h3 id="Storage">Storage</h3><p>主要包括独立的卷和共享本地文件系统：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="operator">-d</span> -P --name web -v /webapp training/webapp python app.py <span class="comment"># volumn不会随容器消失，作为数据独立存在</span></span><br><span class="line">$ docker inspect web <span class="comment"># 查看/var/lib/docker/volumes和vfs</span></span><br><span class="line">$ docker run <span class="operator">-d</span> -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py <span class="comment"># 挂载</span></span><br><span class="line">$ docker run <span class="operator">-d</span> -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py <span class="comment"># 只读挂载</span></span><br><span class="line">$ docker run --rm -it -v ~/.bash_<span class="built_in">history</span>:/.bash_<span class="built_in">history</span> ubuntu /bin/bash <span class="comment"># 只挂载某个文件</span></span><br></pre></td></tr></table></figure>
<p>Container间共享数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker create -v /dbdata --name dbdata training/postgres /bin/<span class="literal">true</span></span><br><span class="line">$ docker run <span class="operator">-d</span> --volumes-from dbdata --name db1 training/postgres</span><br><span class="line">$ docker run <span class="operator">-d</span> --volumes-from dbdata --name db2 training/postgres</span><br><span class="line">$ docker run --volumes-from dbdata -v $(<span class="built_in">pwd</span>):/backup ubuntu tar cvf /backup/backup.tar /dbdata <span class="comment"># 备份容器数据</span></span><br><span class="line">$ docker run --volumes-from dbdata2 -v $(<span class="built_in">pwd</span>):/backup busybox tar xvf /backup/backup.tar <span class="comment"># 恢复数据</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker本地仓库">Docker本地仓库</h2><p>Docker Hub基本用法：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker search ubuntu</span><br><span class="line">$ docker pull ubuntu:<span class="number">14.04</span></span><br><span class="line">$ docker login <span class="comment"># 配置文件在~/.dockercfg</span></span><br><span class="line">$ docker push yourname/newimage</span><br></pre></td></tr></table></figure>
<p>配置本地的registry：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="operator">-d</span> -p <span class="number">5000</span>:<span class="number">5000</span> registry</span><br><span class="line">$ docker tag ubuntu:<span class="number">14.04</span> localhost:<span class="number">5000</span>/ubuntu:<span class="number">14.04</span></span><br><span class="line">$ docker push localhost:<span class="number">5000</span>/ubuntu:<span class="number">14.04</span></span><br><span class="line">$ curl -v http://localhost:<span class="number">5000</span>/v1/repositories/ubuntu/tags/<span class="number">14.04</span> <span class="comment"># 查看image id</span></span><br><span class="line">$ docker run <span class="operator">-d</span> -p <span class="number">5000</span>:<span class="number">5000</span> \</span><br><span class="line">    <span class="operator">-e</span> STANDALONE=<span class="literal">false</span> \</span><br><span class="line">    <span class="operator">-e</span> MIRROR_SOURCE=https://registry-<span class="number">1</span>.docker.io \</span><br><span class="line">    <span class="operator">-e</span> MIRROR_SOURCE_INDEX=https://index.docker.io \</span><br><span class="line">    registry <span class="comment"># 作为官网镜像启动，代理模式</span></span><br></pre></td></tr></table></figure>
<p>使用本地的registry：</p>
<p>可以使用<code>--registry-mirror</code>参数启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker --registry-mirror=http://<span class="number">10.101</span>.<span class="number">29.26</span> <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<h2 id="Docker_Compose">Docker Compose</h2><p>Docker Compose可以方便地实现应用的组合。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install docker-compose</span><br><span class="line">$ mkdir compose &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br></pre></td></tr></table></figure>
<p>增加<code>app.py</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">'redis'</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    redis.incr(<span class="string">'hits'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World! I have been seen %s times.'</span> % redis.get(<span class="string">'hits'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>增加<code>requirements.txt</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask&#10;redis</span><br></pre></td></tr></table></figure>
<p>增加<code>Dockerfile</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM python:2.7&#10;ADD . /code&#10;WORKDIR /code&#10;RUN pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>增加<code>docker-compose.yml</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web:&#10;  build: .&#10;  command: python app.py&#10;  ports:&#10;   - &#34;5000:5000&#34;&#10;  volumes:&#10;   - .:/code&#10;  links:&#10;   - redis&#10;redis:&#10;  image: redis</span><br></pre></td></tr></table></figure>
<p>启动并管理服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up <span class="operator">-d</span></span><br><span class="line">$ docker-compose ps</span><br><span class="line">$ docker-compose run web env</span><br><span class="line">$ docker-compose stop</span><br></pre></td></tr></table></figure>
<h2 id="小结">小结</h2><p>Docker在快速应用分发、扩展等方面有很高的自动化能力，但是跟主机虚拟化一样，网络也是需要重点考虑的难点。默认情况下都是通过本地的一个bridge提供容器之间的通信，通过NAT为应用提供地址，一般的应用部署足以应付，但如果要实现更复杂的网络场景，如多主机上container组成大规模的L3负载均衡集群、应用无缝迁移等，还是需要大量的定制，目前这方面的周边产品开发比较活跃。</p>
<h2 id="参考">参考</h2><ol>
<li><a href="https://docs.docker.com" title="Official Docs" target="_blank" rel="external">Official Docs</a></li>
<li><a href="http://www.infoq.com/cn/articles/analysis-of-docker-file-system-aufs-and-devicemapper" title="Docker fs with aufs and devicemapper" target="_blank" rel="external">Docker with aufs and devicemapper</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-lxc-containers/" title="LXC TOOL" target="_blank" rel="external">LXC Tools</a></li>
<li><a href="https://docs.docker.com/compose" title="Docker Compose" target="_blank" rel="external">Docker Compose</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Docker概述">Docker概述</h1><p>Docker是基于Go语言开发的容器管理工具，而且抽象级别比lxc这些管理工具高，目前官方默认通过libcontainer管理容器。lxc是一些kernel patch（namespaces）和userspace]]>
    </summary>
    
      <category term="docker" scheme="http://promisejohn.github.io/tags/docker/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[BuildKVMImages]]></title>
    <link href="http://promisejohn.github.io/2015/05/11/BuildKVMImages/"/>
    <id>http://promisejohn.github.io/2015/05/11/BuildKVMImages/</id>
    <published>2015-05-11T07:33:37.000Z</published>
    <updated>2015-06-13T07:06:01.239Z</updated>
    <content type="html"><![CDATA[<h2 id="手动创建KVM虚拟机镜像">手动创建KVM虚拟机镜像</h2><p>通过libvirt系的本地命令行管理工具，也可以方便地创建虚拟机。</p>
<ul>
<li>qemu-img：生成虚拟机磁盘文件</li>
<li>virsh：命令行虚拟机管理工具</li>
</ul>
<h3 id="生成Domain_XML文件">生成Domain XML文件</h3><p>如果要用X11远程到物理机使用GUI工具，需要配置sshd，安装<code>xauth</code>：</p>
<p><code>/etc/ssh/sshd_config</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;X11Forwarding yes&#10;X11UseLocalhost no&#10;...</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /etc/init.d/sshd reload</span><br><span class="line">$ yum install -y xauth</span><br><span class="line">$ ssh -X user@host</span><br><span class="line">$ virt-manager&amp;</span><br></pre></td></tr></table></figure>
<p>也可以直接用官方的example修改配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;domain type = &#39;kvm&#39;&#62;&#10;        &#60;name&#62;centos66&#60;/name&#62;&#10;        &#60;memory&#62;1048576&#60;/memory&#62;&#10;        &#60;vcpu&#62;1&#60;/vcpu&#62;&#10;        &#60;os&#62;&#10;                &#60;type arch = &#39;x86_64&#39;machine = &#39;pc&#39;&#62;hvm&#60;/type&#62;&#10;                &#60;boot dev = &#39;cdrom&#39;/&#62;&#10;                &#60;boot dev = &#39;hd&#39;/&#62;&#10;        &#60;/os&#62;&#10;        &#60;features&#62;&#10;                &#60;acpi/&#62;&#10;                &#60;apic/&#62;&#10;                &#60;pae/&#62;&#10;        &#60;/features&#62;&#10;        &#60;clock offset = &#39;utc&#39;/&#62;&#10;        &#60;on_poweroff&#62;destroy&#60;/on_poweroff&#62;&#10;        &#60;on_reboot&#62;restart&#60;/on_reboot&#62;&#10;        &#60;on_crash&#62;destroy&#60;/on_crash&#62;&#10;        &#60;devices&#62;&#10;                &#60;emulator&#62;/usr/libexec/qemu-kvm&#60;/emulator&#62;&#10;                &#60;disk type = &#39;file&#39; device = &#39;disk&#39;&#62;&#10;                        &#60;driver name = &#39;qemu&#39; type = &#39;raw&#39; cache=&#39;none&#39;/&#62;&#10;                        &#60;source file = &#39;/opt/vmdisks/centos66.raw&#39;/&#62;&#10;                        &#60;target dev=&#39;vda&#39; bus=&#39;virtio&#39;/&#62;&#10;                &#60;/disk&#62;&#10;                &#60;disk type = &#39;file&#39; device = &#39;cdrom&#39;&#62;&#10;                        &#60;source file = &#39;/opt/CentOS-6.6-x86_64-bin-DVD1.iso&#39;/&#62;&#10;                        &#60;target dev = &#39;hdb&#39; bus = &#39;ide&#39;/&#62;&#10;                &#60;/disk&#62;&#10;&#34;centos66.xml&#34; 48L, 1243C written                                                                     8,20-34       Top&#10;                        &#60;target dev = &#39;hdb&#39; bus = &#39;ide&#39;/&#62;&#10;                &#60;/disk&#62;&#10;                &#60;interface type=&#39;network&#39;&#62;&#10;                        &#60;source network=&#39;default&#39;/&#62;&#10;                        &#60;model type=&#39;virtio&#39;/&#62;&#10;                &#60;/interface&#62;&#10;                &#60;input type=&#39;tablet&#39; bus=&#39;usb&#39;/&#62;&#10;                &#60;input type=&#39;mouse&#39; bus=&#39;ps2&#39;/&#62;&#10;                &#60;graphics type=&#39;vnc&#39; port=&#39;-1&#39; autoport=&#39;yes&#39; listen=&#39;0.0.0.0&#39;&#62;&#10;                        &#60;listen type=&#39;address&#39; address=&#39;0.0.0.0&#39;/&#62;&#10;                &#60;/graphics&#62;&#10;        &#60;/devices&#62;&#10;&#60;/domain&#62;</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟机">创建虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /opt/vmdisks</span><br><span class="line">$ qemu-img create <span class="operator">-f</span> raw /opt/vmdisks/centos66.raw <span class="number">8</span>G</span><br><span class="line">$ virsh create centos66.xml</span><br><span class="line">$ ip addr</span><br><span class="line">$ virsh vncdisplay centos66 <span class="comment">#获取ip和vnc端口登陆</span></span><br></pre></td></tr></table></figure>
<p>接下来就进入安装操作系统的界面，一路按指印即可。</p>
<h3 id="远程管理libvirt主机">远程管理libvirt主机</h3><p>可以用qemu+ssh，节点间互信后迁移；也可以用qemu+tcp，修改<code>/etc/libvirt/libvirtd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen_tls = 0&#10;listen_tcp = 1&#10;tcp_port = &#34;16509&#34;&#10;listen_addr = &#34;0.0.0.0&#34;&#10;auth_tcp = &#34;none&#34; # &#29983;&#20135;&#29615;&#22659;&#24314;&#35758;&#21152;&#19978;&#25480;&#26435;&#39564;&#35777;</span><br></pre></td></tr></table></figure>
<p>修改<code>/etc/init.d/libvirtd</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf&#10;LIBVIRTD_ARGS=&#34;--listen&#34;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service libvirtd restart</span><br><span class="line">$ ss -ln  | grep <span class="number">16509</span></span><br></pre></td></tr></table></figure>
<p>在其他节点就可以连接（注意iptables）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ virsh -c qemu+tcp://<span class="number">192.168</span>.<span class="number">182.156</span>/system</span><br></pre></td></tr></table></figure>
<p>克隆虚拟机：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ virsh define centos66.xml</span><br><span class="line">$ virt-clone --original=centos66 --name=centos66_01 <span class="operator">-f</span> centos66_01.raw</span><br><span class="line">$ virsh list --all</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3><ol>
<li><a href="http://libvirt.org/formatdomain.html" title="libvirt官方虚拟机规格XML格式说明" target="_blank" rel="external">libvirt官方虚拟机规格XML格式说明</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="手动创建KVM虚拟机镜像">手动创建KVM虚拟机镜像</h2><p>通过libvirt系的本地命令行管理工具，也可以方便地创建虚拟机。</p>
<ul>
<li>qemu-img：生成虚拟机磁盘文件</li>
<li>virsh：命令行虚拟机管理工具</li>
<]]>
    </summary>
    
      <category term="kvm" scheme="http://promisejohn.github.io/tags/kvm/"/>
    
      <category term="libvirt" scheme="http://promisejohn.github.io/tags/libvirt/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Openstack安装部署]]></title>
    <link href="http://promisejohn.github.io/2015/05/07/HelloOpenstack/"/>
    <id>http://promisejohn.github.io/2015/05/07/HelloOpenstack/</id>
    <published>2015-05-07T07:12:56.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h2 id="参考架构及部署规划">参考架构及部署规划</h2><p><img src="http://docs.openstack.org/icehouse/install-guide/install/yum/content/figures/1/a/common/figures/openstack_havana_conceptual_arch.png" alt="参考架构"></p>
<ul>
<li>操作系统：CentOS6.5</li>
<li>第三方yum源：epel, rdo</li>
</ul>
<p>节点部署角色：</p>
<table>
<thead>
<tr>
<th>节点名</th>
<th>internal ip</th>
<th>public ip</th>
<th>Role</th>
</tr>
</thead>
<tbody>
<tr>
<td>oscontroller</td>
<td>10.0.100.145</td>
<td>192.168.182.150</td>
<td>nova, glance, cinder, image, neutron, dashboard, heat</td>
</tr>
<tr>
<td>osnetwork</td>
<td>10.0.100.146</td>
<td>192.168.182.151</td>
<td>ML2, OVS, L2 Agent, L3 Agent, DHCP Agent</td>
</tr>
<tr>
<td>oscompute1</td>
<td>10.0.100.147</td>
<td>192.168.182.152</td>
<td>nova-compute</td>
</tr>
<tr>
<td>oscompute2</td>
<td>10.0.100.148</td>
<td>192.168.182.153</td>
<td>nova-compute</td>
</tr>
<tr>
<td>oskeystone</td>
<td>10.0.100.149</td>
<td>192.168.182.154</td>
<td>qpid/rabbitmq, keystone, mysql， memcached</td>
</tr>
<tr>
<td>osmeter</td>
<td>10.0.100.150</td>
<td>192.168.182.155</td>
<td>ceilometer, mongodb</td>
</tr>
<tr>
<td>osswift0</td>
<td>10.0.100.139</td>
<td>192.168.182.144</td>
<td>swift0, swift-proxy-server</td>
</tr>
<tr>
<td>osswift1</td>
<td>10.0.100.140</td>
<td>192.168.182.145</td>
<td>swift1</td>
</tr>
<tr>
<td>osswift2</td>
<td>10.0.100.141</td>
<td>192.168.182.146</td>
<td>swift2</td>
</tr>
<tr>
<td>osceph0</td>
<td>10.0.100.142</td>
<td>192.168.182.147</td>
<td>ceph0</td>
</tr>
<tr>
<td>osceph1</td>
<td>10.0.100.143</td>
<td>192.168.182.148</td>
<td>ceph1 # 暂时不用</td>
</tr>
<tr>
<td>osceph2</td>
<td>10.0.100.144</td>
<td>192.168.182.149</td>
<td>ceph2 # 暂时不用</td>
</tr>
</tbody>
</table>
<p><img src="http://docs.openstack.org/icehouse/install-guide/install/yum/content/figures/1/figures/installguide_arch-neutron.png" alt="参考部署架构"></p>
<a id="more"></a>
<h2 id="基础环境配置">基础环境配置</h2><h3 id="Network_staff">Network staff</h3><h4 id="配置远程登录，使用~/-ssh/config来简化远程登录操作（免密码验证）：">配置远程登录，使用~/.ssh/config来简化远程登录操作（免密码验证）：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span> <span class="operator">-f</span> ~/.ssh/cloudlab150.key</span><br><span class="line">$ ssh-copy-id -i ~/.ssh/cloudlab150.key.pub root@<span class="number">192.168</span>.<span class="number">182.150</span> <span class="comment"># 这里需要输入密码一次</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>~/.ssh/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Host oscontroller&#10;&#9;&#9;HostName 192.168.182.150&#10;&#9;&#9;User root&#10;&#9;&#9;PreferredAuthentications publickey&#10;&#9;&#9;IdentityFile ~/.ssh/cloudlab150.key</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh oscontroller</span><br></pre></td></tr></table></figure>
<p>通过脚本自动生成Key并添加到~/.ssh/config：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">144</span>..<span class="number">154</span>&#125;; <span class="keyword">do</span> ssh-keygen -t rsa -P <span class="string">''</span> <span class="operator">-f</span> ~/.ssh/cloudlab<span class="variable">$i</span>.key; ssh-copy-id -i ~/.ssh/cloudlab<span class="variable">$i</span>.key.pub root@<span class="number">192.168</span>.<span class="number">182</span>.<span class="variable">$i</span> ;<span class="keyword">done</span>;</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> &#123;<span class="number">144</span>..<span class="number">154</span>&#125;; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"Host cloudlab<span class="variable">$i</span>\n  HostName 192.168.182.<span class="variable">$i</span>\n  User root\n  PreferredAuthentications publickey\n  IdentityFile ~/.ssh/cloudlab<span class="variable">$i</span>.key"</span> &gt;&gt; ~/.ssh/config;<span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>编辑<code>~/.ssh/config</code>: 根据部署规划可以添加Host别名，方便记忆</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;Host cloudlab154 oskeystone&#10;&#9;&#9;HostName 192.168.182.154&#10;...</span><br></pre></td></tr></table></figure>
<h3 id="配置主机HostName及/etc/hosts">配置主机HostName及/etc/hosts</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysconfig/network</span><br><span class="line">$ hostname oskeystone <span class="comment"># 一台台配置oscontroller, osnetwork...</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/hosts</code>: 可以统一配置然后通过scp等工具分发到所有节点</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.182.144 osswift0&#10;192.168.182.145 osswift1&#10;192.168.182.146 osswift2&#10;192.168.182.147 osceph0&#10;192.168.182.148 osceph1&#10;192.168.182.149 osceph2&#10;192.168.182.150 oscontroller&#10;192.168.182.151 osnetwork&#10;192.168.182.152 oscompute1&#10;192.168.182.153 oscompute2&#10;192.168.182.154 oskeystone</span><br></pre></td></tr></table></figure>
<h3 id="配置时区，启用NTP服务">配置时区，启用NTP服务</h3><p>在oskeystone上部署NTP服务器，其他节点从oskeystone上同步时间：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install ntp <span class="comment"># 每个节点都需要ntp client</span></span><br><span class="line">$ chkconfig ntpd on <span class="comment"># oskeystone自动启动ntpd</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/ntpd.conf</code>:<br>服务器端，即oskeystone:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;server&#9;202.112.10.60 # s1a.time.edu.cn&#10;server&#9;127.127.1.0     # local clock&#10;fudge&#9;127.127.1.0 stratum 10&#10;restrict 10.0.100.0 mask 255.255.255.0 nomodify&#10;...</span><br></pre></td></tr></table></figure>
<p>客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server 10.0.100.149&#10;restrict 10.0.100.149 nomodify notrap noquery</span><br></pre></td></tr></table></figure>
<p>启动ntpd服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iptables -F <span class="comment"># 服务器端需要开放UDP 123端口，这里简单测试直接清空</span></span><br><span class="line">$ ntpdate <span class="number">10.0</span>.<span class="number">100.149</span> <span class="comment"># 手动同步一次</span></span><br><span class="line">$ service ntpd start</span><br><span class="line">$ ntpq -p <span class="comment"># 检查时钟源</span></span><br><span class="line">$ ntpstat <span class="comment"># 检查时间同步状态</span></span><br></pre></td></tr></table></figure>
<p>调整时区：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tzselect</span><br><span class="line">$ TZ=<span class="string">'Asia/Shanghai'</span>; <span class="built_in">export</span> TZ</span><br></pre></td></tr></table></figure>
<h3 id="密码准备">密码准备</h3><p>提前准备好安装过程中用到的密码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> KEYSTONE GLANCE NOVA CINDER NEUTRON HEAT CEILOMETER; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span><span class="string">"_DBPASS"</span> `openssl rand -hex <span class="number">10</span>`; <span class="built_in">echo</span> <span class="variable">$i</span><span class="string">"_PASS"</span> `openssl rand -hex <span class="number">10</span>`; <span class="keyword">done</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> MYSQL_PASS QPID_PASS DEMO_PASS ADMIN_PASS DASH_DBPASS METADATA_SECRET SWIFT_PASS; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> `openssl rand -hex <span class="number">10</span>`;<span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<p>记录好生成的输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYSTONE_DBPASS 2e37d19cb04e42cf83ae&#10;KEYSTONE_PASS 86be667d6555105f9eb6 #&#19981;&#38656;&#35201;&#10;GLANCE_DBPASS 9fb6d0fddec4a6dcfa10&#10;GLANCE_PASS 7cb6a024c60dd85c0b71&#10;NOVA_DBPASS e5a43fc52ce0aaa1c7b4&#10;NOVA_PASS fd53a063286a4f22ab7b&#10;CINDER_DBPASS 791ce55fa6888c065bf3&#10;CINDER_PASS 89edec5c2869dce44c61&#10;NEUTRON_DBPASS fd535f9e2441a28a252d&#10;NEUTRON_PASS 033d164bcc70e1244be7&#10;HEAT_DBPASS 51eb27f53983633f3337&#10;HEAT_PASS 3817bfface1b24918d4b&#10;CEILOMETER_DBPASS 072aac393486f9b29235&#10;CEILOMETER_PASS eb8ed86ef2178168c458&#10;MYSQL_PASS a904019ba8cc0b14bef2&#10;QPID_PASS 232a62982a3bcdc86cba&#10;DEMO_PASS c3f7871eaa28ca146d09&#10;ADMIN_PASS b517d18b5663e8e9c2ae&#10;DASH_DBPASS 32ec0f799695e5ff6fe0&#10;METADATA_SECRET 69e2f4db01fe4100bd32&#10;SWIFT_PASS d8e42c6a28bf6eb08b76</span><br></pre></td></tr></table></figure>
<h3 id="数据库安装配置">数据库安装配置</h3><p>选择在oskeystone上安装mysql作为公共的数据库服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install mysql mysql-server MySQL-python</span><br><span class="line">$ yum install MySQL-python <span class="comment"># 需要访问mysql的客户端需要安装python驱动，主要是oscontroller</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/my.cnf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]&#10;...&#10;bind-address = 10.0.100.149&#10;default-storage-engine = innodb&#10;innodb_file_per_table&#10;collation-server = utf8_general_ci&#10;init-connect = &#39;SET NAMES utf8&#39;&#10;character-set-server = utf8&#10;...</span><br></pre></td></tr></table></figure>
<p>启动mysql数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service mysqld start&#10;$ chkconfig mysqld on&#10;$ mysql_install_db&#10;$ mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h3 id="消息服务安装配置">消息服务安装配置</h3><p>在oskeystone安装Qpid消息服务器：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install qpid-cpp-server</span><br></pre></td></tr></table></figure>
<p>暂时不做验证，编辑<code>/etc/qpidd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth=no</span><br></pre></td></tr></table></figure>
<p>启动qpid服务端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service qpidd start</span><br><span class="line">$ chkconfig qpidd on</span><br></pre></td></tr></table></figure>
<h3 id="yum第三方源添加">yum第三方源添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y yum-plugin-priorities</span><br><span class="line">$ yum install -y http://repos.fedorapeople.org/repos/openstack/openstack-icehouse/rdo-release-icehouse-<span class="number">3</span>.noarch.rpm</span><br><span class="line">$ yum install -y http://dl.fedoraproject.org/pub/epel/<span class="number">6</span>/x86_64/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>验证第三方源：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-utils <span class="comment"># 基于crudini，对于多个值的option，需要手动修改配置</span></span><br><span class="line">$ yum install openstack-selinux</span><br></pre></td></tr></table></figure>
<p>更新组件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum upgrade</span><br><span class="line">$ reboot  <span class="comment"># 如果更新了kernel，需要重启</span></span><br></pre></td></tr></table></figure>
<h2 id="ID_Service:_Keystone">ID Service: Keystone</h2><p><img src="http://docs.openstack.org/icehouse/install-guide/install/yum/content/figures/2/figures/SCH_5002_V00_NUAC-Keystone.png" alt="keystone原理"><br>最关键的几个概念中，<strong>tenant</strong>最关键，它是一个资源容器，里面包含了用户、服务列表、组织、账户等资源，是用来聚集和隔离资源的单元。从第2、3步中可以看到，用户是先确定了tenant再获取对应的服务列表。而Keystone在整个过程中，对每一个步骤都进行了鉴权操作。</p>
<h3 id="在oskeystone上安装keystone服务：">在oskeystone上安装keystone服务：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ yum install openstack-keystone python-keystoneclient</span><br><span class="line">$ openstack-config --set /etc/keystone/keystone.conf \</span><br><span class="line">   database connection mysql://keystone:<span class="number">2</span>e37d19cb04e42cf83ae@<span class="number">10.0</span>.<span class="number">100.149</span>/keystone</span><br><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE keystone;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">'keystone'</span>@<span class="string">'localhost'</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON keystone.* TO <span class="string">'keystone'</span>@<span class="string">'%'</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">'KEYSTONE_DBPASS'</span>;</span><br><span class="line">mysql&gt; <span class="built_in">exit</span></span><br><span class="line">$ chown -R keystone:keystone /var/<span class="built_in">log</span>/keystone</span><br><span class="line">$ chown -R keystone:keystone /etc/keystone/</span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"keystone-manage db_sync"</span> keystone</span><br><span class="line">$ ADMIN_TOKEN=$(openssl rand -hex <span class="number">10</span>) <span class="comment"># keystone和其他service之间的token</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$ADMIN_TOKEN</span></span><br><span class="line">$ openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token <span class="variable">$ADMIN_TOKEN</span></span><br><span class="line">$ keystone-manage pki_setup --keystone-user keystone --keystone-group keystone <span class="comment"># 使用 PKI token，效率会低，但是安全。</span></span><br><span class="line">$ chown -R keystone:keystone /etc/keystone/ssl</span><br><span class="line">$ chmod -R o-rwx /etc/keystone/ssl</span><br><span class="line">$ service openstack-keystone start</span><br><span class="line">$ chkconfig openstack-keystone on</span><br></pre></td></tr></table></figure>
<p>把过期的token从数据库删除，在log中记录，防止mysql性能恶化：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ (crontab <span class="operator">-l</span> -u keystone <span class="number">2</span>&gt;&amp;<span class="number">1</span> | grep -q token_flush) || \</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'@hourly /usr/bin/keystone-manage token_flush &gt;/var/log/keystone/keystone-tokenflush.log 2&gt;&amp;1'</span> &gt;&gt; /var/spool/cron/keystone</span><br></pre></td></tr></table></figure>
<h3 id="定义User,_tenant,_role">定义User, tenant, role</h3><p>用ADMIN_TOKEN创建管理员和普通DEMO用户账号：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> OS_SERVICE_TOKEN=b412e43d938a38122d84 <span class="comment"># 之前创建的ADMIN_TOKEN</span></span><br><span class="line">$ <span class="built_in">export</span> OS_SERVICE_ENDPOINT=http://oskeystone:<span class="number">35357</span>/v2.<span class="number">0</span></span><br><span class="line">$ keystone user-create --name=admin --pass=b517d18b5663e8e9c2ae --email=admin@tecstack.org <span class="comment"># 密码开始时已批量生成</span></span><br><span class="line">$ keystone role-create --name=admin</span><br><span class="line">$ keystone tenant-create --name=admin --description=<span class="string">"Admin Tenant"</span></span><br><span class="line">$ keystone user-role-add --user=admin --tenant=admin --role=admin</span><br><span class="line">$ keystone user-role-add --user=admin --role=_member_ --tenant=admin</span><br><span class="line">$ keystone user-create --name=demo --pass=c3f7871eaa28ca146d09 --email=demo@tecstack.org</span><br><span class="line">$ keystone tenant-create --name=demo --description=<span class="string">"Demo Tenant"</span></span><br><span class="line">$ keystone user-role-add --user=demo --role=_member_ --tenant=demo</span><br></pre></td></tr></table></figure>
<p>创建service之间互访的tenant：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ keystone tenant-create --name=service --description=<span class="string">"Service Tenant"</span></span><br></pre></td></tr></table></figure>
<p>在keystone上注册服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ keystone service-create --name=keystone --type=identity \</span><br><span class="line">  --description=<span class="string">"OpenStack Identity"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ identity / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.154</span>:<span class="number">5000</span>/v2.<span class="number">0</span> \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span> \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>验证keystone服务是否注册成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> OS_SERVICE_TOKEN OS_SERVICE_ENDPOINT</span><br><span class="line">$ keystone --os-username=admin --os-password=b517d18b5663e8e9c2ae \</span><br><span class="line">  --os-auth-url=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span> token-get</span><br><span class="line">$ keystone --os-username=admin --os-password=b517d18b5663e8e9c2ae \</span><br><span class="line">  --os-tenant-name=admin --os-auth-url=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span> \</span><br><span class="line">  token-get	<span class="comment"># 带tenant权限</span></span><br></pre></td></tr></table></figure>
<p>新增一个环境变量设置文件<code>~/adminrc</code>简化客户端命令执行参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=b517d18b5663e8e9c2ae</span><br><span class="line"><span class="built_in">export</span> OS_TENANT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">'[\u@\h \W(keystone_admin)]$ '</span> <span class="comment"># 识别是否处于管理员状态</span></span><br></pre></td></tr></table></figure>
<p>验证管理员权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source ~/adminrc&#10;$ keystone user-list</span><br></pre></td></tr></table></figure>
<p>同样也建立一个Demo普通用户的<code>~/demorc</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OS_USERNAME=demo</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=c3f7871eaa28ca146d09</span><br><span class="line"><span class="built_in">export</span> OS_TENANT_NAME=demo</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">'[\u@\h \W(keystone_demo)]$ '</span></span><br></pre></td></tr></table></figure>
<h2 id="Openstack_Service_Clients">Openstack Service Clients</h2><p>Openstack的服务端都提供RESTful API，客户端都是通过curl方式进行交互，且都是基于python2.x实现。<br>可以通过yum安装，也可以通过pip安装，也可以通过pyenv、virtualenv等创建隔离环境后安装以辅助开发多个版本，具体可以参考<a href="http://promisejohn.github.io/2015/04/15/PythonDevEnvSetting/" title="Python开发环境搭建">Python开发环境搭建</a>。这里直接安装到系统版本的python下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum groupinstall -y <span class="string">"Development Tools"</span> <span class="comment"># 有些依赖需要gcc编译</span></span><br><span class="line">$ yum install -y python-devel</span><br><span class="line">$ <span class="built_in">alias</span> easy_install=<span class="string">'easy_install -i http://pypi.douban.com/simple'</span> <span class="comment"># 用douban源加速</span></span><br><span class="line">$ easy_install pip</span><br></pre></td></tr></table></figure>
<p>修改pip源，<code>~/.pip/pip.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[global]&#10;index-url = http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
<p>批量安装Clients：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> cinder nova keystone glance neutron swift heat ceilometer; <span class="keyword">do</span> pip install  <span class="string">"python-"</span><span class="variable">$i</span><span class="string">"client"</span>;<span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Images_Service:_Glance">Images Service: Glance</h2><p>默认采用本地文件系统存储镜像：<code>/var/lib/glance/images/</code><br>glance-api提供API，glance-registry负责image的metadata存取查询。metadata保存在mysql，image文件本身可以存在文件系统或对象存储等。</p>
<h3 id="安装Glance_Service">安装Glance Service</h3><p>在oscontroller上部署Glance Service：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-glance python-glanceclient</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf database \</span><br><span class="line">  connection mysql://glance:<span class="number">9</span>fb6d0fddec4a6dcfa10@<span class="number">10.0</span>.<span class="number">100.149</span>/glance</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf database \</span><br><span class="line">  connection mysql://glance:<span class="number">9</span>fb6d0fddec4a6dcfa10@<span class="number">10.0</span>.<span class="number">100.149</span>/glance</span><br></pre></td></tr></table></figure>
<p>在oskeystone上增加glance数据库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -pa904019ba8cc0b14bef2&#10;mysql&#62; CREATE DATABASE glance;&#10;mysql&#62; GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;localhost&#39; \&#10;IDENTIFIED BY &#39;9fb6d0fddec4a6dcfa10&#39;;&#10;mysql&#62; GRANT ALL PRIVILEGES ON glance.* TO &#39;glance&#39;@&#39;%&#39; \&#10;IDENTIFIED BY &#39;9fb6d0fddec4a6dcfa10&#39;;</span><br></pre></td></tr></table></figure>
<p>在oscontroller上同步数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R glance:glance /etc/glance</span><br><span class="line">$ chown -R glance:glance /var/<span class="built_in">log</span>/glance</span><br><span class="line">$ chown -R glance:glance /var/lib/glance</span><br><span class="line">$ chown -R glance:glance /var/run/glance</span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"glance-manage db_sync"</span> glance <span class="comment"># 使用glance账户执行命令</span></span><br></pre></td></tr></table></figure>
<p>Ops，出现Warning和Error：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...PowmInsecureWarning: Not using mpz_powm_sec.  You should rebuild using libgmp &#62;= 5 to avoid timing attack vulnerability.&#10;  _warn(&#34;Not using mpz_powm_sec.  You should rebuild using libgmp &#62;= 5 to avoid timing attack vulnerability.&#34;, PowmInsecureWarning)...</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tailf /var/log/glance/api.log&#10;... glance AttributeError: &#39;NoneType&#39; object has no attribute &#39;replace&#39; ...</span><br></pre></td></tr></table></figure>
<p>Warning可以在<a href="http://techglimpse.com/openstack-installation-errors-solutions/" title="openstack安装错误方案" target="_blank" rel="external">这个网址</a>查到解决方案：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://gmplib.org/download/gmp/gmp-<span class="number">6.0</span>.<span class="number">0</span>a.tar.bz2</span><br><span class="line">$ tar xvf gmp-<span class="number">6.0</span>.<span class="number">0</span>a.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> gmp-<span class="number">6.0</span>.<span class="number">0</span></span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make check</span><br><span class="line">$ make install</span><br><span class="line">$ wget https://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-<span class="number">2.6</span>.<span class="number">1</span>.tar.gz <span class="comment"># 从源码安装，而不是从pip，否则会有ImportError: .../_AES.so: undefined symbol: rpl_malloc错误</span></span><br><span class="line">$ tar xvf pycrypto-<span class="number">2.6</span>.<span class="number">1</span>.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pycrypto-<span class="number">2.6</span>.<span class="number">1</span></span><br><span class="line">$ <span class="built_in">export</span> ac_cv_func_malloc_0_nonnull=yes</span><br><span class="line">$ ./configure</span><br><span class="line">$ python setup.py build</span><br><span class="line">$ python setup.py install</span><br></pre></td></tr></table></figure>
<p>出现的错误很奇怪，网上也没什么案例，只能一步步看日志trace：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File &#34;/usr/lib/python2.6/site-packages/glance/openstack/common/db/sqlalchemy/migration.py&#34;, line 236, in db_version&#10;2015-04-22 02:43:28.196 27939 TRACE glance     meta.reflect(bind=engine)&#10;2015-04-22 02:43:28.196 27939 TRACE glance   File &#34;/usr/lib64/python2.6/site-packages/sqlalchemy/schema.py&#34;, line 2776, in reflect&#10;2015-04-22 02:43:28.196 27939 TRACE glance     connection=conn))&#10;2015-04-22 02:43:28.196 27939 TRACE glance   File &#34;/usr/lib64/python2.6/site-packages/sqlalchemy/engine/base.py&#34;, line 1677, in table_names&#10;2015-04-22 02:43:28.196 27939 TRACE glance     return self.dialect.get_table_names(conn, schema)</span><br></pre></td></tr></table></figure>
<p>可以关注的是3处关键词：<strong>bind=engine</strong>, <strong>connection=conn</strong>, <strong>get_table_names(conn, schema)</strong>，很大程度上表明数据库连接建立失败，而且是在获取schema的时候，重新检查一下<code>/etc/glance/glance-api.conf</code>，发现mysql连接最后少加了schema，即误写成了<code>mysql://glance:9fb6d0fddec4a6dcfa10@10.0.100.149/</code>，少了<code>glance</code>，改正后再执行db_sync成功。</p>
<h3 id="创建Glance服务权限：">创建Glance服务权限：</h3><p>创建Glance Service与Keystone验证的用户：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/adminrc  <span class="comment"># 加载admin环境变量</span></span><br><span class="line">$ keystone user-create --name=glance --pass=<span class="number">7</span>cb6a024c60dd85c0b71 \</span><br><span class="line">   --email=glance@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=glance --tenant=service --role=admin</span><br></pre></td></tr></table></figure>
<p>配置Glance Service通过Keystone进行鉴权：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  admin_user glance</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">7</span>cb6a024c60dd85c0b71</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf paste_deploy \</span><br><span class="line">  flavor keystone</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  admin_user glance</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">7</span>cb6a024c60dd85c0b71</span><br><span class="line">$ openstack-config --set /etc/glance/glance-registry.conf paste_deploy \</span><br><span class="line">  flavor keystone</span><br></pre></td></tr></table></figure>
<p>注册Glance Service服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ keystone service-create --name=glance --type=image \</span><br><span class="line">  --description=<span class="string">"OpenStack Image Service"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ image / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">9292</span> \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9292</span> \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9292</span></span><br></pre></td></tr></table></figure>
<p>启动Glance服务进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-glance-api start</span><br><span class="line">$ service openstack-glance-registry start</span><br><span class="line">$ chkconfig openstack-glance-api on</span><br><span class="line">$ chkconfig openstack-glance-registry on</span><br></pre></td></tr></table></figure>
<h3 id="验证Glance_Service">验证Glance Service</h3><p>用cirros验证镜像服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://cdn.download.cirros-cloud.net/<span class="number">0.3</span>.<span class="number">2</span>/cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64-disk.img</span><br><span class="line">$ file cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64-disk.img</span><br><span class="line">cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64-disk.img: Qemu Image, Format: Qcow , Version: <span class="number">2</span></span><br><span class="line">$ <span class="built_in">source</span> ~/adminrc</span><br><span class="line">$ glance image-create --name <span class="string">"cirros-0.3.2-x86_64"</span> --disk-format qcow2 \</span><br><span class="line">  --container-format bare --is-public True --progress &lt; cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64-disk.img</span><br><span class="line">$ glance image-list</span><br></pre></td></tr></table></figure>
<p>如果不想下载镜像，可以直接通过<code>--copy-from</code>参数直接导入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ glance image-create --name=<span class="string">"cirros-0.3.2-x86_64"</span> --disk-format=qcow2 \</span><br><span class="line">  --container-format=bare --is-public=<span class="literal">true</span> \</span><br><span class="line">  --copy-from http://cdn.download.cirros-cloud.net/<span class="number">0.3</span>.<span class="number">2</span>/cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64-disk.img</span><br></pre></td></tr></table></figure>
<h2 id="Compute_Service:_Nova">Compute Service: Nova</h2><p>Compute是IaaS的核心，<code>nova-api</code>,<code>nova-api-metadata</code>提供API服务；<code>nova-compute</code>调用hypervisor API启停虚拟机，<code>nova-scheduler</code>从请求队列调度分配主机，<code>nova-conductor</code>把<code>nova-compute</code>和数据库解耦，可以横向扩展，不建议跟<code>nova-compute</code>一起部署；<code>nova-network</code>, <code>nova-dhcpbridge</code>，网络部分功能逐步合并到Neutron Service；<code>nova-consoleauth</code>，负责控制台鉴权，<code>nova-novncproxy</code>和<code>nova-xvpnvncproxy</code>分别对应浏览器和java客户端，<code>nova-cert</code>管理x509证书。<code>nova-objectstore</code>和<code>euca2ools</code>是针对EC2场景的工具，实现Image Service和S3的互通；<code>nova</code>,<code>nova-manage</code>是本地客户端。</p>
<h3 id="Nova安装">Nova安装</h3><p>在oscontroller上安装nova管理端：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-nova-api openstack-nova-cert openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler python-novaclient</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf \</span><br><span class="line">  database connection mysql://nova:e5a43<span class="built_in">fc</span>52ce0aaa1c7b4@<span class="number">10.0</span>.<span class="number">100.149</span>/nova</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf \</span><br><span class="line">  DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT my_ip <span class="number">10.0</span>.<span class="number">100.145</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_listen <span class="number">10.0</span>.<span class="number">100.145</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_proxyclient_address <span class="number">10.0</span>.<span class="number">100.145</span></span><br></pre></td></tr></table></figure>
<p>在oskeystone上创建nova的数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -pa904019ba8cc0b14bef2</span><br><span class="line">mysql&gt; CREATE DATABASE nova;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON nova.* TO <span class="string">'nova'</span>@<span class="string">'%'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'e5a43fc52ce0aaa1c7b4'</span>;</span><br></pre></td></tr></table></figure>
<p>在oscontroller上同步nova数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R nova:nova /etc/nova/</span><br><span class="line">$ chown -R nova:nova /var/<span class="built_in">log</span>/nova/</span><br><span class="line">$ chown -R nova:nova /var/run/nova/</span><br><span class="line">$ chown -R nova:nova /var/lib/nova/</span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"nova-manage db sync"</span> nova</span><br></pre></td></tr></table></figure>
<p>创建Nova Service在Keystone上的账号权限，配置其使用keystone做鉴权：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=nova --pass=fd53a063286a4f22ab7b --email=nova@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=nova --tenant=service --role=admin</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_user nova</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_password fd53a063286a4f22ab7b</span><br></pre></td></tr></table></figure>
<p>在oskeystone上注册Nova Service：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/adminrc</span><br><span class="line">$ keystone service-create --name=nova --type=compute \</span><br><span class="line">  --description=<span class="string">"OpenStack Compute"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ compute / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">8774</span>/v2/%\(tenant_id\)s \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8774</span>/v2/%\(tenant_id\)s \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8774</span>/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure>
<p>启动Nova服务程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> svc <span class="keyword">in</span> openstack-nova-&#123;api,cert,consoleauth,scheduler,conductor,novncproxy&#125;; <span class="keyword">do</span> service <span class="variable">$svc</span> start; chkconfig <span class="variable">$svc</span> on; <span class="keyword">done</span>;</span><br><span class="line">$ <span class="keyword">for</span> svc <span class="keyword">in</span> openstack-nova-&#123;api,cert,consoleauth,scheduler,conductor,novncproxy&#125;; <span class="keyword">do</span> service <span class="variable">$svc</span> status; chkconfig | grep <span class="variable">$svc</span>; <span class="keyword">done</span>;  <span class="comment"># 检查进程状态及自动启动设置状态</span></span><br></pre></td></tr></table></figure>
<p>检查Nova Service部署</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/adminrc</span><br><span class="line">$ nova image-list</span><br></pre></td></tr></table></figure>
<h3 id="部署计算节点：">部署计算节点：</h3><p>在oscompute1和oscompute2上安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-nova-compute</span><br><span class="line">$ egrep -c <span class="string">'(vmx|svm)'</span> /proc/cpuinfo <span class="comment"># 确定CPU支持虚拟化，如果不支持硬件虚拟化，需要配置nova.conf中的libvirt virt_type为qemu</span></span><br><span class="line"><span class="comment"># openstack-config --set /etc/nova/nova.conf libvirt virt_type qemu</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/nova/nova.conf</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf database connection mysql://nova:e5a43<span class="built_in">fc</span>52ce0aaa1c7b4@<span class="number">10.0</span>.<span class="number">100.149</span>/nova</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_user nova</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf keystone_authtoken admin_password fd53a063286a4f22ab7b</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br></pre></td></tr></table></figure>
<p>在计算节点启用console：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT my_ip <span class="number">192.168</span>.<span class="number">182.152</span>/<span class="number">153</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT vnc_enabled True</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_listen <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT vncserver_proxyclient_address <span class="number">192.168</span>.<span class="number">182.152</span>/<span class="number">153</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf \</span><br><span class="line">  DEFAULT novncproxy_base_url http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">6080</span>/vnc_auto.html</span><br></pre></td></tr></table></figure>
<p>配置Glance：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT glance_host <span class="number">10.0</span>.<span class="number">100.145</span></span><br></pre></td></tr></table></figure>
<p>启动进程服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ service libvirtd start</span><br><span class="line">$ service messagebus start</span><br><span class="line">$ service openstack-nova-compute start</span><br><span class="line">$ chkconfig libvirtd on</span><br><span class="line">$ chkconfig messagebus on</span><br><span class="line">$ chkconfig openstack-nova-compute on</span><br></pre></td></tr></table></figure>
<h2 id="Network_Service:_Neutron_with_ML2">Network Service: Neutron with ML2</h2><p>网络部分关键概念包括：networks, subnets, routes，至少有1个“外部”网络。网络功能由plugin提供，如core plugin, security group plugin, FW, LB, …</p>
<h3 id="部署Neutron管理端">部署Neutron管理端</h3><h4 id="在oskeystone上准备Neutron数据库：">在oskeystone上准备Neutron数据库：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; CREATE DATABASE neutron;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON neutron.* TO <span class="string">'neutron'</span>@<span class="string">'%'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'fd535f9e2441a28a252d'</span>;</span><br></pre></td></tr></table></figure>
<p>创建Neutron的keystone账号，并注册Neutron服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/adminrc</span><br><span class="line">$ keystone user-create --name neutron --pass <span class="number">033</span>d164bcc70e1244be7 --email neutron@tecstack.org</span><br><span class="line">$ keystone user-role-add --user neutron --tenant service --role admin</span><br><span class="line">$ keystone service-create --name neutron --type network --description <span class="string">"OpenStack Networking"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id $(keystone service-list | awk <span class="string">'/ network / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">9696</span> \</span><br><span class="line">  --adminurl http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9696</span> \</span><br><span class="line">  --internalurl http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9696</span></span><br></pre></td></tr></table></figure>
<h4 id="在oscontroller上部署配置Neutron服务端：">在oscontroller上部署配置Neutron服务端：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-neutron openstack-neutron-ml2 python-neutronclient</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf database connection \</span><br><span class="line">  mysql://neutron:fd535f9e2441a28a252d@<span class="number">10.0</span>.<span class="number">100.149</span>/neutron</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_user neutron</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  core_plugin ml2</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  service_plugins router</span><br></pre></td></tr></table></figure>
<p>配置Neutron使用MQ：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  rpc_backend neutron.openstack.common.rpc.impl_qpid</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br></pre></td></tr></table></figure>
<p>配置Neutron与计算节点的通知：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  notify_nova_on_port_status_changes True</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  notify_nova_on_port_data_changes True</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  nova_url http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8774</span>/v2</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  nova_admin_username nova</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  nova_admin_tenant_id $(keystone tenant-list | awk <span class="string">'/ service / &#123; print $2 &#125;'</span>)</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  nova_admin_password fd53a063286a4f22ab7b</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  nova_admin_auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>创建neutron ml2 plugn配置链接：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln <span class="operator">-s</span> plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br></pre></td></tr></table></figure>
<p>配置ML2插件：ML2使用OVS处理网络流量。在oscontroller上配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  <span class="built_in">type</span>_drivers gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  tenant_network_types gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  mechanism_drivers openvswitch</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_<span class="built_in">type</span>_gre \</span><br><span class="line">  tunnel_id_ranges <span class="number">1</span>:<span class="number">1000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  firewall_driver neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  <span class="built_in">enable</span>_security_group True</span><br></pre></td></tr></table></figure>
<h4 id="在oscontroller上：配置Nova管理端使用Neutron管理网络：">在oscontroller上：配置Nova管理端使用Neutron管理网络：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  network_api_class nova.network.neutronv2.api.API</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_url http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9696</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_username neutron</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  linuxnet_interface_driver nova.network.linux_net.LinuxOVSInterfaceDriver</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  firewall_driver nova.virt.firewall.NoopFirewallDriver <span class="comment"># 禁用nova-compute内置的FW功能。</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  security_group_api neutron</span><br></pre></td></tr></table></figure>
<p>在oscontroller上重启Nova服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-nova-api restart</span><br><span class="line">$ service openstack-nova-scheduler restart</span><br><span class="line">$ service openstack-nova-conductor restart</span><br></pre></td></tr></table></figure>
<h4 id="在oscontroller上启动Neutron服务：">在oscontroller上启动Neutron服务：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service neutron-server start</span><br><span class="line">$ chkconfig neutron-server on</span><br></pre></td></tr></table></figure>
<p>正常情况下，neutron-server在启动的时候会自动初始化数据库，如果出错，可以在oscontroller上手动建立数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  core_plugin neutron.plugins.ml2.plugin.Ml2Plugin</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  service_plugins neutron.services.l3_router.l3_router_plugin.L3RouterPlugin</span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"neutron-db-manage --config-file /etc/neutron/neutron.conf \</span><br><span class="line">  --config-file /etc/neutron/plugin.ini upgrade head"</span> neutron</span><br></pre></td></tr></table></figure>
<h3 id="在osnetwork上配置Linux转发及Neutron_Agent">在osnetwork上配置Linux转发及Neutron Agent</h3><h4 id="启用IP转发">启用IP转发</h4><p>编辑<code>/etc/sysctl.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1&#10;net.ipv4.conf.all.rp_filter=0&#10;net.ipv4.conf.default.rp_filter=0&#10;net.bridge.bridge-nf-call-arptables=1&#10;net.bridge.bridge-nf-call-iptables=1&#10;net.bridge.bridge-nf-call-ip6tables=1</span><br></pre></td></tr></table></figure>
<p>使生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure>
<h4 id="部署配置Neutron及ML2,_OVS,_L3：">部署配置Neutron及ML2, OVS, L3：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-neutron openstack-neutron-ml2 \</span><br><span class="line">  openstack-neutron-openvswitch</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_user neutron</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  rpc_backend neutron.openstack.common.rpc.impl_qpid</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  core_plugin ml2</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  service_plugins router</span><br><span class="line">$ openstack-config --set /etc/neutron/l3_agent.ini DEFAULT \</span><br><span class="line">  interface_driver neutron.agent.linux.interface.OVSInterfaceDriver</span><br><span class="line">$ openstack-config --set /etc/neutron/l3_agent.ini DEFAULT \</span><br><span class="line">  use_namespaces True</span><br></pre></td></tr></table></figure>
<p>官方文档对于网络包大小解释的比较清楚，直接引用如下：</p>
<p>&gt;<br>Tunneling protocols such as generic routing encapsulation (GRE) include additional packet headers that increase overhead and decrease space available for the payload or user data. Without knowledge of the virtual network infrastructure, instances attempt to send packets using the default Ethernet maximum transmission unit <strong>(MTU) of 1500 bytes</strong>. Internet protocol (IP) networks contain the path MTU discovery (<strong>PMTUD</strong>) mechanism to detect end-to-end MTU and adjust packet size accordingly. However, some operating systems and networks block or otherwise <strong>lack support for PMTUD</strong> causing performance degradation or connectivity failure.<br>&gt;<br>Ideally, you can prevent these problems by enabling <strong>jumbo frames on the physical network</strong> that contains your tenant virtual networks. Jumbo frames support MTUs up to approximately <strong>9000 bytes</strong> which negates the impact of GRE overhead on virtual networks. However, many network devices lack support for jumbo frames and OpenStack administrators often lack control of network infrastructure. Given the latter complications, you can also prevent MTU problems by <strong>reducing the instance MTU to account for GRE overhead</strong>. Determining the proper MTU value often takes experimentation, but <strong>1454 bytes</strong> works in most environments. You can configure the DHCP server that assigns IP addresses to your instances to also adjust the MTU.<br>Some cloud images such as CirrOS ignore the DHCP MTU option.</p>
<p>大致意思是默认的MTU为1500字节，当加入了GRE等tunnel包头后会超过1500字节，IP协议理论上通过PMTUD可以自动调节传输路径上的MTU大小，但有些OS和网络设备因缺乏对PMTUD的支持会拦截此类包导致通断或性能问题。Jumbo frames支持最大9000字节的MTU，但是需要硬件网络设备的支持。<br>通常情况下，可以从虚拟机端设计MTU的大小，一般1454字节（减去了GRE的包头大小）在大部分环境下可行，MTU的设置可以通过DHCP服务器配置，但有些OS如CirrOS不支持DHCP配置MTU。</p>
<h4 id="配置osnetwork上的dhcp组件：">配置osnetwork上的dhcp组件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT \</span><br><span class="line">  interface_driver neutron.agent.linux.interface.OVSInterfaceDriver</span><br><span class="line">$ openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT \</span><br><span class="line">  dhcp_driver neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">$ openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT \</span><br><span class="line">  use_namespaces True</span><br><span class="line">$ openstack-config --set /etc/neutron/dhcp_agent.ini DEFAULT \</span><br><span class="line">  dnsmasq_config_file /etc/neutron/dnsmasq-neutron.conf <span class="comment"># DHCP MTU</span></span><br></pre></td></tr></table></figure>
<p>新建编辑<code>/etc/neutron/dnsmasq-neutron.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhcp-option-force=26,1454</span><br></pre></td></tr></table></figure>
<p>停止所有dnsmasq进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall dnsmasq</span><br></pre></td></tr></table></figure>
<h4 id="配置metadata_agent组件：">配置metadata agent组件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span></span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  auth_region regionOne</span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  admin_user neutron</span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  nova_metadata_ip <span class="number">10.0</span>.<span class="number">100.145</span></span><br><span class="line">$ openstack-config --set /etc/neutron/metadata_agent.ini DEFAULT \</span><br><span class="line">  metadata_proxy_shared_secret <span class="number">69</span>e2f4db01fe4100bd32</span><br></pre></td></tr></table></figure>
<h4 id="配置oscontroller上的nova：">配置oscontroller上的nova：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  service_neutron_metadata_proxy <span class="literal">true</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_metadata_proxy_shared_secret <span class="number">69</span>e2f4db01fe4100bd32</span><br><span class="line">$ service openstack-nova-api restart</span><br></pre></td></tr></table></figure>
<h4 id="配置osnetwork上的ML2,_OVS插件：">配置osnetwork上的ML2, OVS插件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  <span class="built_in">type</span>_drivers gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  tenant_network_types gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  mechanism_drivers openvswitch</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_<span class="built_in">type</span>_gre \</span><br><span class="line">  tunnel_id_ranges <span class="number">1</span>:<span class="number">1000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  <span class="built_in">local</span>_ip <span class="number">10.0</span>.<span class="number">100.146</span> <span class="comment"># osnetwork的内部ip</span></span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  tunnel_<span class="built_in">type</span> gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  <span class="built_in">enable</span>_tunneling True</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  firewall_driver neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  <span class="built_in">enable</span>_security_group True</span><br><span class="line">$ ln <span class="operator">-s</span> plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br></pre></td></tr></table></figure>
<p>修复打包的bug，让neutron-openvswitch-agent使用<code>plugin.ini</code>配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/init.d/neutron-openvswitch-agent /etc/init.d/neutron-openvswitch-agent.orig</span><br><span class="line">$ sed -i <span class="string">'s,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g'</span> /etc/init.d/neutron-openvswitch-agent</span><br></pre></td></tr></table></figure>
<h4 id="启动OVS，添加br-int,_br-ex为内部和外部bridge：">启动OVS，添加br-int, br-ex为内部和外部bridge：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ service openvswitch start</span><br><span class="line">$ chkconfig openvswitch on</span><br><span class="line">$ ovs-vsctl add-br br-int</span><br><span class="line">$ ovs-vsctl add-br br-ex</span><br><span class="line">$ ovs-vsctl add-port br-ex eth1</span><br></pre></td></tr></table></figure>
<p>官网提示内部虚拟机和外部网络之间的吞吐可以通过关闭GRO提升，临时关闭方法：<code>ethtool -K INTERFACE_NAME gro off</code></p>
<p>Ops. 发现添加port后网络连接断开了。Google下，Linux bridge kernel module一直要求一旦某个interface加入到了在某个bridge下时，不能再单独配置IP被访问，如果要访问host，则可以把这个IP（或其他可访问的IP）分配给所在的bridge。可以参考<a href="http://www.gossamer-threads.com/lists/openstack/operators/34627" title="Problem configuring openvswitch br-ex" target="_blank" rel="external">这个链接</a>。对应的解决方案就是把原来的public ip从eth1删除，配置到br-exs上：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr del <span class="number">192.168</span>.<span class="number">182.151</span>/<span class="number">25</span> dev eth1</span><br><span class="line">$ ip addr add <span class="number">192.168</span>.<span class="number">182.151</span>/<span class="number">25</span> dev br-ex</span><br><span class="line">$ ip route del default via <span class="number">192.168</span>.<span class="number">182.254</span> dev eth1  <span class="comment"># 改变默认路由</span></span><br><span class="line">$ ip route add default via <span class="number">192.168</span>.<span class="number">182.254</span> dev br-ex</span><br></pre></td></tr></table></figure>
<p>这样就能再次访问osnetwork节点，看<a href="https://www.rdoproject.org/Neutron_with_existing_external_network" title="Neutron_with_existing_external_network" target="_blank" rel="external">RDO的文档</a>里也有提及，建议把br-ex写到配置文件并删除eth1配置文件里的IP信息后重启网络：</p>
<p>新增<code>/etc/sysconfig/network-scripts/ifcfg-br-ex</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=br-ex&#10;DEVICETYPE=ovs&#10;TYPE=OVSBridge&#10;BOOTPROTO=static&#10;IPADDR=192.168.182.151&#10;NETMASK=255.255.255.128 # your netmask&#10;GATEWAY=192.168.182.254 # your gateway&#10;#DNS1=192.168.122.1      # your nameserver&#10;ONBOOT=yes</span><br></pre></td></tr></table></figure>
<p>修改<code>/etc/sysconfig/network-scripts/ifcfg-eth1</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth1&#10;HWADDR=00:50:56:b8:dd:e0 # your hwaddr&#10;TYPE=OVSPort&#10;DEVICETYPE=ovs&#10;OVS_BRIDGE=br-ex&#10;ONBOOT=yes&#10;&#10;#NM_CONTROLLED=yes&#10;#BOOTPROTO=none&#10;#IPADDR=192.168.182.151&#10;#NETMASK=255.255.255.128&#10;#GATEWAY=192.168.182.254&#10;#IPV6INIT=no&#10;#USERCTL=no</span><br></pre></td></tr></table></figure>
<p>修改完之后，执行：<code>service network restart</code>，系统会自动把默认路由指向br-ex。</p>
<h4 id="启动Neutron_Agent服务：">启动Neutron Agent服务：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> svc <span class="keyword">in</span> neutron-&#123;openvswitch,l3,dhcp,metadata&#125;-agent; <span class="keyword">do</span> \</span><br><span class="line">	service <span class="variable">$svc</span> start; chkconfig <span class="variable">$svc</span> on;<span class="keyword">done</span>;</span><br><span class="line">$ <span class="keyword">for</span> svc <span class="keyword">in</span> neutron-&#123;openvswitch,l3,dhcp,metadata&#125;-agent; <span class="keyword">do</span> \</span><br><span class="line">	service <span class="variable">$svc</span> status; chkconfig | grep  <span class="variable">$svc</span>;<span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<h3 id="在oscompute1和oscompute2上配置Linux转发及Neutron_Agent">在oscompute1和oscompute2上配置Linux转发及Neutron Agent</h3><h4 id="启用Linux转发">启用Linux转发</h4><p>编辑<code>/etc/sysctl.conf</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.conf.all.rp_filter=<span class="number">0</span></span><br><span class="line">net.ipv4.conf.default.rp_filter=<span class="number">0</span></span><br><span class="line">net.bridge.bridge-nf-call-arptables=<span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-iptables=<span class="number">1</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>使生效：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure>
<h4 id="安装部署Neutron_ML2和OVS">安装部署Neutron ML2和OVS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-neutron-ml2 openstack-neutron-openvswitch</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_user neutron</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  rpc_backend neutron.openstack.common.rpc.impl_qpid</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  core_plugin ml2</span><br><span class="line">$ openstack-config --set /etc/neutron/neutron.conf DEFAULT \</span><br><span class="line">  service_plugins router</span><br></pre></td></tr></table></figure>
<h4 id="配置ML2">配置ML2</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  <span class="built_in">type</span>_drivers gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  tenant_network_types gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2 \</span><br><span class="line">  mechanism_drivers openvswitch</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ml2_<span class="built_in">type</span>_gre \</span><br><span class="line">  tunnel_id_ranges <span class="number">1</span>:<span class="number">1000</span></span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  <span class="built_in">local</span>_ip <span class="number">10.0</span>.<span class="number">100.147</span>/<span class="number">148</span></span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  tunnel_<span class="built_in">type</span> gre</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini ovs \</span><br><span class="line">  <span class="built_in">enable</span>_tunneling True</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  firewall_driver neutron.agent.linux.iptables_firewall.OVSHybridIptablesFirewallDriver</span><br><span class="line">$ openstack-config --set /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup \</span><br><span class="line">  <span class="built_in">enable</span>_security_group True</span><br><span class="line">$ ln <span class="operator">-s</span> plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br></pre></td></tr></table></figure>
<h4 id="配置OVS">配置OVS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service openvswitch start</span><br><span class="line">$ chkconfig openvswitch on</span><br><span class="line">$ ovs-vsctl add-br br-int</span><br></pre></td></tr></table></figure>
<h4 id="配置Nova-Compute">配置Nova-Compute</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  network_api_class nova.network.neutronv2.api.API</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_url http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">9696</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_username neutron</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_password <span class="number">033</span>d164bcc70e1244be7</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  neutron_admin_auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">35357</span>/v2.<span class="number">0</span></span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  linuxnet_interface_driver nova.network.linux_net.LinuxOVSInterfaceDriver</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  firewall_driver nova.virt.firewall.NoopFirewallDriver</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  security_group_api neutron</span><br></pre></td></tr></table></figure>
<h4 id="修改neutron-openvswitch-agent使用plugin-ini配置：">修改<code>neutron-openvswitch-agent</code>使用plugin.ini配置：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cp /etc/init.d/neutron-openvswitch-agent /etc/init.d/neutron-openvswitch-agent.orig</span><br><span class="line">$ sed -i <span class="string">'s,plugins/openvswitch/ovs_neutron_plugin.ini,plugin.ini,g'</span> /etc/init.d/neutron-openvswitch-agent</span><br></pre></td></tr></table></figure>
<h4 id="启动nova-computer,neutron-openvswitch-agent进程">启动<code>nova-computer</code>,<code>neutron-openvswitch-agent</code>进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-nova-compute restart</span><br><span class="line">$ service neutron-openvswitch-agent start</span><br><span class="line">$ chkconfig neutron-openvswitch-agent on</span><br></pre></td></tr></table></figure>
<h3 id="初始化虚拟机的网络">初始化虚拟机的网络</h3><p>启动第一个虚拟机实例之前，必须先创建给虚拟机连接的虚拟网络，包括外部网络和租户网络。<br>在oscontroller上，通过admin账户创建外部网络，共享给所有租户；通过demo账户创建租户私有网络，再创建路由实现与外部网络连通。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> adminrc</span><br><span class="line">$ neutron net-create ext-net --shared --router:external=True</span><br><span class="line">$ neutron subnet-create ext-net --name ext-subnet \</span><br><span class="line">  --allocation-pool start=<span class="number">192.168</span>.<span class="number">182.200</span>,end=<span class="number">192.168</span>.<span class="number">182.220</span> \</span><br><span class="line">  --disable-dhcp --gateway <span class="number">192.168</span>.<span class="number">182.254</span> <span class="number">192.168</span>.<span class="number">182.128</span>/<span class="number">25</span></span><br><span class="line">$ <span class="built_in">source</span> demorc</span><br><span class="line">$ neutron net-create demo-net</span><br><span class="line">$ neutron subnet-create demo-net --name demo-subnet \</span><br><span class="line">  --gateway <span class="number">192.168</span>.<span class="number">1.1</span> <span class="number">192.168</span>.<span class="number">1.0</span>/<span class="number">24</span></span><br><span class="line">$ neutron router-create demo-router</span><br><span class="line">$ neutron router-interface-add demo-router demo-subnet</span><br><span class="line">$ ip netns list <span class="comment"># 能看到新增了一个`qrouter-4bd0dc16-ae05-4304-9483-41c0f9a67775`的namespace</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 ip addr <span class="comment"># 能看到新增了`qr-af814b8f-c9`这个port。</span></span><br><span class="line">$ ovs-vsctl list-ports br-int <span class="comment"># 能看到增加了`qr-af814b8f-c9`这个port。</span></span><br><span class="line">$ neutron router-gateway-set demo-router ext-net</span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 ip addr <span class="comment"># 能看到新增了`qg-269d911c-25`这个port，且它的ip就是ext-subnet里的floating IP。</span></span><br><span class="line">$ ovs-vsctl list-ports br-ex <span class="comment"># 能看到增加了`qg-269d911c-25`这个port。</span></span><br></pre></td></tr></table></figure>
<p>检验连通性，在osnetwork上ping所创建的router（第一个floating IP地址）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ping -c <span class="number">4</span> <span class="number">192.168</span>.<span class="number">182.200</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 ping <span class="number">192.168</span>.<span class="number">182.151</span>  <span class="comment"># 从router发起ping到外部的网络，首先可以ping通所在物理机osnetwork的端口</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 ping <span class="number">192.168</span>.<span class="number">182.100</span> <span class="comment"># 可以ping通网关和其他子网下的Hosts</span></span><br></pre></td></tr></table></figure>
<p>从这里可以理解，底层是通过Linux kernel的net namespace实现了网络隔离，即多租户能力。其实neutron给router添加interface和设定gateway的的时候，其实是在底层创建了一个net namespace并把租户子网的网关和从外部网络获取的floatingIP添加到了router中作为port，从而实现租户内私有网络和外部公共网络打通。</p>
<p>如果发现从router里可以和osnetwork互相ping通，但是无法和同一子网下的其他主机ping通，很大程度上是二层交换问题，可以通过在osnetwork和router上同时抓包，分析arp请求；如果发现arp无返回，则说明二层osnetwork之外的交换机配置有问题，比如在vmware虚拟化环境下安装openstack，则需要把vmware的虚拟交换机开启<code>混杂模式</code>。用到的调测命令如下，更多可以参考<a href="http://docs.openstack.org/openstack-ops/content/network_troubleshooting.html" title="Network troubleshooting" target="_blank" rel="external">网络问题排查方法</a>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ovs-appctl fdb/show br-ex <span class="comment"># 查看br-ex的mac表，可以查看mac地址学习状态</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 tcpdump -nn arp  <span class="comment"># 在router上抓arp包</span></span><br><span class="line">$ ip netns <span class="built_in">exec</span> qrouter-<span class="number">4</span>bd0dc16-ae05-<span class="number">4304</span>-<span class="number">9483</span>-<span class="number">41</span>c0f9a67775 ip route <span class="comment"># 在router上执行路由命令</span></span><br><span class="line">$ ovs-vsctl list Interface gre-<span class="number">0</span>a006491 <span class="comment"># 查看 ovs交换机上某个端口的详细状态</span></span><br><span class="line">$ neutron agent-list <span class="comment"># 查看neutron上网络组件状态</span></span><br><span class="line">$ ovs-dpctl show <span class="comment">#查看ovs端口配置</span></span><br></pre></td></tr></table></figure>
<h3 id="虚拟机网络流量通道">虚拟机网络流量通道</h3><p><img src="http://docs.openstack.org/admin-guide-cloud/content/figures/14/a/a/common/figures/under-the-hood-scenario-1-ovs-compute.png" alt="ovs networking"><br>在创建虚拟机之后（可以部署完dashboard之后做更方便），可以<code>ip addr</code>看到oscomputeX上新增了4个设备，分别以<code>tap, qbr, qvb, qvo</code>开头，osnetwork上也也新增了<code>qdhcp</code>开头的namespace。oscomputeX上新增的tap设备用于连接虚拟机端口，qbr是一个普通linux bridge，qvb和qvo是veth pair，连接了qbr和br-int。不把tap直接挂到br-int的理由就是目前Openstack security group的实现方式是基于iptables对tap设备的控制，而openvswitch不支持iptables控制挂在它上面的tap设备。<br>官方引文如下，详细可以参考<a href="http://docs.openstack.org/admin-guide-cloud/content/under_the_hood_openvswitch.html" title="Networking Openvswitch on Openstack" target="_blank" rel="external">Networking Openvswitch on Openstack</a>:</p>
<blockquote>
<p>Security groups: iptables and Linux bridges<br>Ideally, the TAP device vnet0 would be connected directly to the integration bridge, br-int. Unfortunately, this isn’t possible because of how OpenStack security groups are currently implemented. OpenStack uses iptables rules on the TAP devices such as vnet0 to implement security groups, and Open vSwitch is not compatible with iptables rules that are applied directly on TAP devices that are connected to an Open vSwitch port.<br>Networking uses an extra Linux bridge and a veth pair as a workaround for this issue. Instead of connecting vnet0 to an Open vSwitch bridge, it is connected to a Linux bridge, qbrXXX. This bridge is connected to the integration bridge, br-int, through the (qvbXXX, qvoXXX) veth pair.</p>
</blockquote>
<h3 id="删除或变更GRE通道">删除或变更GRE通道</h3><p>当使用GRE tunnel时，所有network节点和compute节点之间是建立了full-mesh结构的点对点tunnel，当需要变动ip地址的时候（比如之前配置的时候把network节点上的local_ipx写错），需要手动把neutron数据库ip_addressb表中的错误ip删除，修改配置文件后重启network和计算节点傻姑上的<code>neutron-openvswitch-agent</code>服务。</p>
<h2 id="Dashboard">Dashboard</h2><p>Horizon是一个基于python2.6的Django app。需要安装Keystone和Nova服务之后才能使用dashboard。<br>在oskeystone上部署dashboard：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y memcached python-memcached mod_wsgi openstack-dashboard</span><br></pre></td></tr></table></figure>
<p>根据<code>/etc/sysconfig/memcached</code>内容修改<code>/etc/openstack-dashboard/local_settings</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;&#10;&#9;&#39;default&#39;: &#123;&#10;&#9;&#39;BACKEND&#39; : &#39;django.core.cache.backends.memcached.MemcachedCache&#39;,&#10;&#9;&#39;LOCATION&#39; : &#39;127.0.0.1:11211&#39;&#10;&#9;&#125;&#10;&#125;&#10;ALLOWED_HOSTS = [&#39;localhost&#39;, &#39;192.168.182.154&#39;]&#10;OPENSTACK_HOST = &#34;10.0.100.149&#34;  # hostname of Identity Service</span><br></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ setsebool -P httpd_can_network_connect on</span><br><span class="line">$ getsebool httpd_can_network_connect <span class="comment"># check selinux status</span></span><br><span class="line">$ service httpd start</span><br><span class="line">$ service httpd start</span><br><span class="line">$ chkconfig httpd on</span><br><span class="line">$ chkconfig memcached on</span><br></pre></td></tr></table></figure>
<p>访问<code>http://192.168.182.149/dashboard</code>，Ops…看apache日志<code>tailf /var/log/httpd/error_log</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;File &#34;/usr/lib/python2.6/site-packages/keystoneclient/__init__.py&#34;, line 43, in &#60;module&#62;&#10;__version__ = pbr.version.VersionInfo(&#39;python-keystoneclient&#39;).version_string()&#10;...&#10;File &#34;/usr/lib/python2.6/site-packages/pbr/packaging.py&#34;, line 864, in get_version&#10;raise Exception(&#34;Versioning for this project requires either an sdist&#34;&#10;Exception: Versioning for this project requires either an sdist tarball, or access to an upstream git repository. Are you sure that git is installed?&#10;...</span><br></pre></td></tr></table></figure>
<p>看起来跟<code>python-keystoneclient</code>的加载有关，于是关闭apache，用本地命令执行方式启动horizon的Django应用，如果要切换回Apache等启动方式，记得删除<code>/tmp</code>下自动生成的<code>SECRET_KEY</code>（在<code>/etc/openstack-dashboard/local_settings</code>中配置）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/share/openstack-dashboard</span><br><span class="line">$ python manage.py runserver <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>发现错误信息一致，甚至不加参数执行<code>python manage.py</code>也会出现同样错误。Google到<a href="https://github.com/rackspace/pyrax/issues/450" target="_blank" rel="external">一个同样的问题</a>，更新<code>distribute</code>可解决，具体原因还没找到，初步估计跟打包方式及pbr有关：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade distribute</span><br></pre></td></tr></table></figure>
<p>另，如果出现<code>ERROR: [Errno 113] No route to host</code>，可以检查Nova服务端的Host上iptables是否设置正确。</p>
<h2 id="Block_Service:_Cinder">Block Service: Cinder</h2><ul>
<li><code>cinder-api</code>: API</li>
<li><code>cinder-volume</code>: 通过driver与块设备交互</li>
<li><code>cinder-scheduler</code>: 选择最优块来创建卷</li>
</ul>
<h3 id="在oscontroller上安装Cinder_Service">在oscontroller上安装Cinder Service</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-cinder</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  database connection mysql://cinder:<span class="number">791</span>ce55fa6888c065bf3@<span class="number">10.0</span>.<span class="number">100.149</span>/cinder</span><br></pre></td></tr></table></figure>
<p>在oskeystone上创建cinder的数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -pa904019ba8cc0b14bef2</span><br><span class="line">mysql&gt; CREATE DATABASE cinder;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON cinder.* TO <span class="string">'cinder'</span>@<span class="string">'%'</span> \</span><br><span class="line">  IDENTIFIED BY <span class="string">'791ce55fa6888c065bf3'</span>;</span><br></pre></td></tr></table></figure>
<p>同步数据库结构：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"cinder-manage db sync"</span> cinder</span><br></pre></td></tr></table></figure>
<p>创建cinder的keystone账户，配置<code>/etc/cinder/cinder.conf</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=cinder --pass=<span class="number">89</span>edec5c2869dce44c61 --email=cinder@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=cinder --tenant=service --role=admin</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf DEFAULT \</span><br><span class="line">  auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_user cinder</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">89</span>edec5c2869dce44c61</span><br></pre></td></tr></table></figure>
<p>配置MQ，在Keystone上注册Cinder Service：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line"><span class="comment"># API Version 1</span></span><br><span class="line">$ keystone service-create --name=cinder --type=volume --description=<span class="string">"OpenStack Block Storage"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ volume / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">8776</span>/v1/%\(tenant_id\)s \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8776</span>/v1/%\(tenant_id\)s \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8776</span>/v1/%\(tenant_id\)s</span><br><span class="line"><span class="comment"># API Version 2</span></span><br><span class="line">$ keystone service-create --name=cinderv2 --type=volumev2 --description=<span class="string">"OpenStack Block Storage v2"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ volumev2 / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">8776</span>/v2/%\(tenant_id\)s \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8776</span>/v2/%\(tenant_id\)s \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8776</span>/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-cinder-api start</span><br><span class="line">$ service openstack-cinder-scheduler start</span><br><span class="line">$ chkconfig openstack-cinder-api on</span><br><span class="line">$ chkconfig openstack-cinder-scheduler on</span><br></pre></td></tr></table></figure>
<h3 id="在osceph0上部署一个临时存储节点">在osceph0上部署一个临时存储节点</h3><p>安装配置cinder：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-cinder scsi-target-utils</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf DEFAULT \</span><br><span class="line">  auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_user cinder</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">89</span>edec5c2869dce44c61</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  database connection mysql://cinder:<span class="number">791</span>ce55fa6888c065bf3@<span class="number">10.0</span>.<span class="number">100.149</span>/cinder</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT my_ip <span class="number">10.0</span>.<span class="number">100.142</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT glance_host <span class="number">10.0</span>.<span class="number">100.145</span>  <span class="comment"># cinder使用glance images创建可启动卷</span></span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf \</span><br><span class="line">  DEFAULT iscsi_helper tgtadm  <span class="comment"># 使用tgtadm iSCSI service</span></span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/tgt/targets.conf</code>，让<code>iSCSI target service</code>发现卷：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /etc/cinder/volumes/*</span><br></pre></td></tr></table></figure>
<p>模拟块设备:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/opt/volumes/cinderVolumes bs=<span class="number">1</span>M count=<span class="number">10240</span></span><br><span class="line">$ losetup <span class="operator">-f</span> cinderVolumes <span class="comment"># 自动找到一个未使用的loop设备</span></span><br><span class="line">$ losetup <span class="operator">-a</span>  <span class="comment"># 查看映射状态</span></span><br><span class="line">$ pvcreate /dev/loop0 <span class="comment"># Use your own loop device</span></span><br><span class="line">$ vgcreate cinder-volumes /dev/loop0 <span class="comment"># Use your own loop device</span></span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/lvm/lvm.conf</code>，让LVM不要扫描VM所用的卷：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devices &#123;&#10;...&#10;filter = [ &#34;a/loop0/&#34;, &#34;r/.*/&#34;] # pvdisplay&#21482;&#33021;&#30475;&#21040;loop0&#30340;&#35774;&#22791;&#10;...&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-cinder-volume start</span><br><span class="line">$ service tgtd start</span><br><span class="line">$ chkconfig openstack-cinder-volume on</span><br><span class="line">$ chkconfig tgtd on</span><br></pre></td></tr></table></figure>
<p>验证测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> demorc</span><br><span class="line">$ cinder create --display-name myVolume <span class="number">1</span></span><br><span class="line">$ cinder list <span class="comment"># 如果状态为available则正常</span></span><br></pre></td></tr></table></figure>
<p>之后就可以在dashboard上把卷attach到instance上当块设备使用。</p>
<h2 id="创建Instance云主机">创建Instance云主机</h2><p>基于dashboard的很简单，看GUI操作很明确，基于命令也可以。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> demorc</span><br><span class="line">$ ssh-keygen -t rsa -P <span class="string">''</span> <span class="operator">-f</span> my.key</span><br><span class="line">$ nova keypair-add --pub-key ./my.key.pub demo-key</span><br><span class="line">$ nova keypair-list</span><br><span class="line">$ nova flavor-list</span><br><span class="line">$ nova image-list</span><br><span class="line">$ nova net-list</span><br><span class="line">$ nova secgroup-list</span><br><span class="line">$ nova boot --flavor m1.tiny --image cirros-<span class="number">0.3</span>.<span class="number">2</span>-x86_64 --nic net-id=b7d34c60-<span class="number">5439</span>-<span class="number">4</span>ec8-<span class="number">9468</span>-<span class="number">8</span>e2406801b98 \</span><br><span class="line">  --security-group default --key-name demo-key demo-instance1</span><br><span class="line">$ nova list</span><br><span class="line">$ nova get-vnc-console demo-instance1 novnc</span><br></pre></td></tr></table></figure>
<h2 id="Object_Service:_Swift">Object Service: Swift</h2><ul>
<li>swift-proxy-server: API，操作metadata, container，提供file和container列表，可以配合memcached提高性能；</li>
<li>swift-account-server: swift账号管理</li>
<li>swift-container-server: 容器管理</li>
<li>swift-object-server: 存储节点，要求支持<code>XATTRS</code>，推荐<code>XFS</code></li>
<li>定时任务进程，用于清理、一致性检验等</li>
</ul>
<h3 id="创建swift账号，在keystone上注册服务：">创建swift账号，在keystone上注册服务：</h3><p>192.168.182.128/25做为public网络，10.0.100.0/24做为数据内部同步网络。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=swift --pass=d8e42c6a28bf6eb08b76 \</span><br><span class="line">  --email=swift@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=swift --tenant=service --role=admin</span><br><span class="line">$ keystone service-create --name=swift --type=object-store \</span><br><span class="line">  --description=<span class="string">"OpenStack Object Storage"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ object-store / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=<span class="string">'http://192.168.182.144:8080/v1/AUTH_%(tenant_id)s'</span> \</span><br><span class="line">  --internalurl=<span class="string">'http://10.0.100.139:8080/v1/AUTH_%(tenant_id)s'</span> \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.139</span>:<span class="number">8080</span></span><br></pre></td></tr></table></figure>
<p>在<strong>所有节点</strong>上配置swift hash，用于确定swift ring的mapping，所有节点要一致且不可更改:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /etc/swift</span><br><span class="line">$ openssl rand -base64 <span class="number">12</span> <span class="comment"># 执行2次，生成2个随机字符串，用于swift_hash_path_*fix</span></span><br><span class="line">$ cat &gt; /etc/swift/swift.conf &lt;&lt; EOF</span><br><span class="line">[swift-hash]</span><br><span class="line"><span class="comment"># random unique string that can never change (DO NOT LOSE)</span></span><br><span class="line">swift_<span class="built_in">hash</span>_path_prefix = Fjt8GhQTi13Vr6Hc</span><br><span class="line">swift_<span class="built_in">hash</span>_path_suffix = <span class="number">7</span>uOcSBwQrK6pAtfx</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="部署存储节点">部署存储节点</h3><p>每个osswift节点创建3个模拟的块设备，每个设备分配5G容量，在所有osswift上操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /opt/swift_disk</span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/opt/swift_disk/swdisk0 bs=<span class="number">1</span>M count=<span class="number">5120</span></span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/opt/swift_disk/swdisk1 bs=<span class="number">1</span>M count=<span class="number">5120</span></span><br><span class="line">$ dd <span class="keyword">if</span>=/dev/zero of=/opt/swift_disk/swdisk2 bs=<span class="number">1</span>M count=<span class="number">5120</span></span><br><span class="line">$ losetup <span class="operator">-f</span> /opt/swift_disk/swdisk0</span><br><span class="line">$ losetup <span class="operator">-f</span> /opt/swift_disk/swdisk1</span><br><span class="line">$ losetup <span class="operator">-f</span> /opt/swift_disk/swdisk2</span><br><span class="line">$ losetup <span class="operator">-a</span> <span class="comment"># 查看映射状态</span></span><br></pre></td></tr></table></figure>
<p>安装部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-swift-account openstack-swift-container \</span><br><span class="line">  openstack-swift-object xfsprogs xinetd</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> loop&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;<span class="keyword">do</span> mkfs.xfs /dev/<span class="variable">$i</span>; <span class="built_in">echo</span> <span class="string">"/dev/<span class="variable">$i</span> /srv/node/<span class="variable">$i</span> xfs noatime,nodiratime,nobarrier,logbufs=8 0 0"</span> &gt;&gt; /etc/fstab; mkdir -p /srv/node/<span class="variable">$i</span> ; mount /srv/node/<span class="variable">$i</span>;<span class="keyword">done</span>;</span><br><span class="line">$ chown -R swift:swift /srv/node  <span class="comment"># 注意每次重建xfs之后需要确认权限</span></span><br></pre></td></tr></table></figure>
<p>创建<code>/etc/rsyncd.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid = swift&#10;gid = swift&#10;log file = /var/log/rsyncd.log&#10;pid file = /var/run/rsyncd.pid&#10;address = 10.0.100.139/140/141 # &#21508;&#20010;&#23384;&#20648;&#33410;&#28857;&#30340;&#25968;&#25454;&#21516;&#27493;&#32593;IP&#10; &#10;[account]&#10;max connections = 2&#10;path = /srv/node/&#10;read only = false&#10;lock file = /var/lock/account.lock&#10; &#10;[container]&#10;max connections = 2&#10;path = /srv/node/&#10;read only = false&#10;lock file = /var/lock/container.lock&#10; &#10;[object]&#10;max connections = 2&#10;path = /srv/node/&#10;read only = false&#10;lock file = /var/lock/object.lock</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/xinetd.d/rsync</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disable = no</span><br></pre></td></tr></table></figure>
<p>启动xinetd:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service xinetd start</span><br><span class="line">$ mkdir -p /var/swift/recon</span><br><span class="line">$ chown -R swift:swift /var/swift/recon</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/swift/account-server.conf</code>,<code>/etc/swift/container-server.conf</code>,<code>/etc/swift/object-server.conf</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;bind_ip = 192.168.182.144/145/146 # &#32465;&#23450;&#21040;&#21508;&#33258;&#33410;&#28857;&#30340;public&#32593;&#32476;&#22320;&#22336;&#10;...</span><br></pre></td></tr></table></figure>
<h3 id="在osswift0上部署proxy_server">在osswift0上部署proxy server</h3><p>使用oskeystone上的memcached：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-swift-proxy python-swiftclient python-keystone-auth-token</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/swift/proxy-server.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[filter:authtoken]</span><br><span class="line">paste.filter_factory = keystoneclient.middleware.auth_token:filter_factory</span><br><span class="line"><span class="comment"># Delaying the auth decision is required to support token-less</span></span><br><span class="line"><span class="comment"># usage for anonymous referrers ('.r:*').</span></span><br><span class="line">delay_auth_decision = <span class="literal">true</span></span><br><span class="line">auth_protocol = http</span><br><span class="line">auth_host = <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">auth_port = <span class="number">35357</span></span><br><span class="line">admin_tenant_name = service</span><br><span class="line">admin_user = swift</span><br><span class="line">admin_password = d8e42c6a28bf6eb08b76</span><br><span class="line"></span><br><span class="line">[filter:cache]</span><br><span class="line">use = egg:swift	<span class="comment">#memcache</span></span><br><span class="line"><span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">11211</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>配置<code>/etc/swift/object-expirer.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;[filter:cache]&#10;use = egg:swift#memcache&#10;memcache_servers = 10.0.100.149:11211&#10;...</span><br></pre></td></tr></table></figure>
<p>配置swift的ring：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/swift</span><br><span class="line">$ swift-ring-builder account.builder create <span class="number">18</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">$ swift-ring-builder container.builder create <span class="number">18</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">$ swift-ring-builder object.builder create <span class="number">18</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> loop&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="keyword">do</span> swift-ring-builder account.builder add z1-<span class="number">192.168</span>.<span class="number">182.144</span>:<span class="number">6002</span>R10.<span class="number">0.100</span>.<span class="number">139</span>:<span class="number">6005</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder container.builder add z1-<span class="number">192.168</span>.<span class="number">182.144</span>:<span class="number">6001</span>R10.<span class="number">0.100</span>.<span class="number">139</span>:<span class="number">6004</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder object.builder add z1-<span class="number">192.168</span>.<span class="number">182.144</span>:<span class="number">6000</span>R10.<span class="number">0.100</span>.<span class="number">139</span>:<span class="number">6003</span>/<span class="variable">$i</span> <span class="number">100</span>; <span class="keyword">done</span>; <span class="comment"># 把osswift0的设备加入zone1</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> loop&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="keyword">do</span> swift-ring-builder account.builder add z2-<span class="number">192.168</span>.<span class="number">182.145</span>:<span class="number">6002</span>R10.<span class="number">0.100</span>.<span class="number">140</span>:<span class="number">6005</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder container.builder add z2-<span class="number">192.168</span>.<span class="number">182.145</span>:<span class="number">6001</span>R10.<span class="number">0.100</span>.<span class="number">140</span>:<span class="number">6004</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder object.builder add z2-<span class="number">192.168</span>.<span class="number">182.145</span>:<span class="number">6000</span>R10.<span class="number">0.100</span>.<span class="number">140</span>:<span class="number">6003</span>/<span class="variable">$i</span> <span class="number">100</span>; <span class="keyword">done</span>; <span class="comment"># 把osswift1的设备加入zone2</span></span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> loop&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;; <span class="keyword">do</span> swift-ring-builder account.builder add z3-<span class="number">192.168</span>.<span class="number">182.146</span>:<span class="number">6002</span>R10.<span class="number">0.100</span>.<span class="number">141</span>:<span class="number">6005</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder container.builder add z3-<span class="number">192.168</span>.<span class="number">182.146</span>:<span class="number">6001</span>R10.<span class="number">0.100</span>.<span class="number">141</span>:<span class="number">6004</span>/<span class="variable">$i</span> <span class="number">100</span>; swift-ring-builder object.builder add z3-<span class="number">192.168</span>.<span class="number">182.146</span>:<span class="number">6000</span>R10.<span class="number">0.100</span>.<span class="number">141</span>:<span class="number">6003</span>/<span class="variable">$i</span> <span class="number">100</span>; <span class="keyword">done</span>; <span class="comment"># 把osswift2的设备加入zone3</span></span><br><span class="line">$ swift-ring-builder account.builder  <span class="comment"># 注意检查上面的IP, 端口信息</span></span><br><span class="line">$ swift-ring-builder container.builder</span><br><span class="line">$ swift-ring-builder object.builder <span class="comment"># 检查</span></span><br><span class="line">$ swift-ring-builder account.builder rebalance</span><br><span class="line">$ swift-ring-builder container.builder rebalance</span><br><span class="line">$ swift-ring-builder object.builder rebalance <span class="comment"># Relance the ring.</span></span><br><span class="line">$ chown -R swift:swift /etc/swift</span><br></pre></td></tr></table></figure>
<p>把<code>account.ring.gz</code>,<code>container.ring.gz</code>,<code>object.ring.gz</code>复制到proxy-server和Storage Server的<code>/etc/swift</code>下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/swift <span class="comment"># 由于proxy server部署在osswift0，在osswift0上生成ring配置文件。</span></span><br><span class="line">$ scp account.ring.gz container.ring.gz  object.ring.gz root@osswift1:/etc/swift/</span><br><span class="line">$ scp account.ring.gz container.ring.gz  object.ring.gz root@osswift2:/etc/swift/</span><br></pre></td></tr></table></figure>
<h3 id="启动服务：">启动服务：</h3><p>启动proxy节点上的服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-swift-proxy start</span><br><span class="line">$ chkconfig openstack-swift-proxy on</span><br></pre></td></tr></table></figure>
<p>启动存储节点上的服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ for service in \&#10;  openstack-swift-object openstack-swift-object-replicator openstack-swift-object-updater openstack-swift-object-auditor \&#10;  openstack-swift-container openstack-swift-container-replicator openstack-swift-container-updater openstack-swift-container-auditor \&#10;  openstack-swift-account openstack-swift-account-replicator openstack-swift-account-reaper openstack-swift-account-auditor; do \&#10;    service $service start; chkconfig $service on; done # &#20063;&#21487;&#20197;&#29992;swift-init all start&#21551;&#21160;&#25152;&#26377;&#26381;&#21153;&#36827;&#31243;</span><br></pre></td></tr></table></figure>
<p>检验效果：（确保osswift各个节点的iptables配置正确）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> adminrc</span><br><span class="line">$ swift <span class="built_in">stat</span></span><br><span class="line">$ <span class="built_in">cd</span>; <span class="built_in">echo</span> <span class="string">"Hello test"</span> &gt; test.txt; <span class="built_in">echo</span> <span class="string">"Hello test2"</span> &gt; <span class="built_in">test</span>2.txt</span><br><span class="line">$ swift upload myfiles test.txt</span><br><span class="line">$ swift upload myfiles <span class="built_in">test</span>2.txt</span><br><span class="line">$ swift download myfiles</span><br></pre></td></tr></table></figure>
<p>swift默认的log比较奇怪，是在/var/log/messages里。</p>
<h2 id="Heat">Heat</h2><p>流程编排服务，类似于vagrant，适合自动化系统规划部署：</p>
<ul>
<li>heat: client</li>
<li>heat-api: REST API</li>
<li>heat-api-cfn: AWS Query API</li>
<li>heat-engine: 根据模板执行</li>
</ul>
<p>在oskeystone上准备heat的数据库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -pa904019ba8cc0b14bef2</span><br><span class="line">mysql&gt; CREATE DATABASE heat;</span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON heat.* TO <span class="string">'heat'</span>@<span class="string">'%'</span> \</span><br><span class="line">IDENTIFIED BY <span class="string">'51eb27f53983633f3337'</span>;</span><br></pre></td></tr></table></figure>
<p>在oscontroller上安装heat：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-heat-api openstack-heat-engine \</span><br><span class="line">  openstack-heat-api-cfn</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf \</span><br><span class="line">  database connection mysql://heat:<span class="number">51</span>eb27f53983633f3337@<span class="number">10.0</span>.<span class="number">100.149</span>/heat</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  auth_host <span class="number">10.0</span>.<span class="number">100.149</span>  <span class="comment"># 官方</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  auth_port <span class="number">35357</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  admin_user heat</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf keystone_authtoken \</span><br><span class="line">  admin_password <span class="number">3817</span>bfface1b24918d4b</span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf ec2authtoken \</span><br><span class="line">  auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span>  <span class="comment"># 可以暂时不配置。</span></span><br><span class="line">$ su <span class="operator">-s</span> /bin/sh -c <span class="string">"heat-manage db_sync"</span> heat</span><br></pre></td></tr></table></figure>
<p>创建Heat Service的keystone账号，注册服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ keystone user-create --name=heat --pass=<span class="number">3817</span>bfface1b24918d4b \</span><br><span class="line">  --email=heat@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=heat --tenant=service --role=admin</span><br><span class="line">$ keystone service-create --name=heat --type=orchestration \</span><br><span class="line">  --description=<span class="string">"Orchestration"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ orchestration / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">8004</span>/v1/%\(tenant_id\)s \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8004</span>/v1/%\(tenant_id\)s \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8004</span>/v1/%\(tenant_id\)s</span><br><span class="line">$ keystone service-create --name=heat-cfn --type=cloudformation \</span><br><span class="line">  --description=<span class="string">"Orchestration CloudFormation"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ cloudformation / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.150</span>:<span class="number">8000</span>/v1 \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8000</span>/v1 \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8000</span>/v1</span><br><span class="line">$ keystone role-create --name heat_stack_user <span class="comment"># Orchestration创建用户的默认角色</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf \</span><br><span class="line">  DEFAULT heat_metadata_server_url http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8000</span></span><br><span class="line">$ openstack-config --set /etc/heat/heat.conf DEFAULT \ 	heat_waitcondition_server_url http://<span class="number">10.0</span>.<span class="number">100.145</span>:<span class="number">8000</span>/v1/waitcondition</span><br></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-heat-api start</span><br><span class="line">$ service openstack-heat-api-cfn start</span><br><span class="line">$ service openstack-heat-engine start</span><br><span class="line">$ chkconfig openstack-heat-api on</span><br><span class="line">$ chkconfig openstack-heat-api-cfn on</span><br><span class="line">$ chkconfig openstack-heat-engine on</span><br></pre></td></tr></table></figure>
<p>验证效果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> demorc</span><br><span class="line">$ vim <span class="built_in">test</span>-stack.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heat_template_version: 2013-05-23&#10;&#10;description: Test Template&#10;&#10;parameters:&#10;  ImageID:&#10;    type: string&#10;    description: Image use to boot a server&#10;  NetID:&#10;    type: string&#10;    description: Network ID for the server&#10;&#10;resources:&#10;  server1:&#10;    type: OS::Nova::Server&#10;    properties:&#10;      name: &#34;Test server&#34;&#10;      image: &#123; get_param: ImageID &#125;&#10;      flavor: &#34;m1.tiny&#34;&#10;      networks:&#10;      - network: &#123; get_param: NetID &#125;&#10;&#10;outputs:&#10;  server1_private_ip:&#10;    description: IP address of the server in the private network&#10;    value: &#123; get_attr: [ server1, first_address ] &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ NET_ID=$(nova net-list | awk <span class="string">'/ demo-net / &#123; print $2 &#125;'</span>)</span><br><span class="line">$ heat stack-create <span class="operator">-f</span> <span class="built_in">test</span>-stack.yml \</span><br><span class="line">  -P <span class="string">"ImageID=cirros-0.3.2-x86_64;NetID=<span class="variable">$NET_ID</span>"</span> <span class="built_in">test</span>Stack</span><br><span class="line">$ heat stack-list</span><br></pre></td></tr></table></figure>
<h2 id="Ceilometer">Ceilometer</h2><p>监控CPU、网络等指标，通过REST API访问。</p>
<ul>
<li>ceilometer-agent-compute: 部署在每个计算节点，目前主要针对计算节点采集信息；</li>
<li>ceilometer-agent-central: 非计算节点信息采集；</li>
<li>ceilometer-collector: 采集信息汇聚。</li>
<li>ceilometer-alarm-notifier: 告警设置。</li>
<li>ceilometer-api: 接受查询请求。</li>
<li>后端存储，比如mongodb。</li>
</ul>
<h3 id="在osmeter部署Ceilmeter_Service：">在osmeter部署Ceilmeter Service：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-ceilometer-api openstack-ceilometer-collector \</span><br><span class="line">  openstack-ceilometer-notification openstack-ceilometer-central openstack-ceilometer-alarm python-ceilometerclient</span><br></pre></td></tr></table></figure>
<p>配置MongoDB：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y mongodb-server mongodb</span><br><span class="line">$ vim /etc/mongodb.conf <span class="comment"># edit the bind_ip to osmeter internal ip:10.0.100.150</span></span><br><span class="line">$ service mongod start</span><br><span class="line">$ chkconfig mongod on</span><br><span class="line">$ mongo --host <span class="number">10.0</span>.<span class="number">100.150</span> --eval <span class="string">'</span><br><span class="line">db = db.getSiblingDB("ceilometer");</span><br><span class="line">db.addUser(&#123;user: "ceilometer",</span><br><span class="line">            pwd: "072aac393486f9b29235",</span><br><span class="line">            roles: [ "readWrite", "dbAdmin" ]&#125;)'</span></span><br></pre></td></tr></table></figure>
<p>配置Ceilmeter服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  database connection mongodb://ceilometer:<span class="number">072</span>aac393486f9b29235@<span class="number">10.0</span>.<span class="number">100.150</span>:<span class="number">27017</span>/ceilometer</span><br><span class="line">$ CEILOMETER_TOKEN=$(openssl rand -hex <span class="number">10</span>)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$CEILOMETER_TOKEN</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf publisher metering_secret <span class="variable">$CEILOMETER_TOKEN</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  DEFAULT rpc_backend ceilometer.openstack.common.rpc.impl_qpid</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  DEFAULT auth_strategy keystone</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_user ceilometer</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken auth_uri http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_password eb8ed86ef2178168c458</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_username ceilometer</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_password eb8ed86ef2178168c458</span><br></pre></td></tr></table></figure>
<p>注册Keystone服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ keystone service-create --name=ceilometer --type=metering \</span><br><span class="line">  --description=<span class="string">"Telemetry"</span></span><br><span class="line">$ keystone endpoint-create \</span><br><span class="line">  --service-id=$(keystone service-list | awk <span class="string">'/ metering / &#123;print $2&#125;'</span>) \</span><br><span class="line">  --publicurl=http://<span class="number">192.168</span>.<span class="number">182.155</span>:<span class="number">8777</span> \</span><br><span class="line">  --internalurl=http://<span class="number">10.0</span>.<span class="number">100.150</span>:<span class="number">8777</span> \</span><br><span class="line">  --adminurl=http://<span class="number">10.0</span>.<span class="number">100.150</span>:<span class="number">8777</span></span><br><span class="line">$ keystone user-create --name=ceilometer --pass=eb8ed86ef2178168c458 --email=ceilometer@tecstack.org</span><br><span class="line">$ keystone user-role-add --user=ceilometer --tenant=service --role=admin</span><br></pre></td></tr></table></figure>
<p>启动服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> svc <span class="keyword">in</span> openstack-ceilometer-&#123;api,notification,central,collector,alarm-evaluator,alarm-notifier&#125;; <span class="keyword">do</span> service <span class="variable">$svc</span> start; chkconfig <span class="variable">$svc</span> on; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>
<h3 id="给计算节点部署Agent：">给计算节点部署Agent：</h3><p>在oscompute1和oscompute2上安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y openstack-ceilometer-compute python-ceilometerclient python-pecan</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/nova/nova.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  instance_usage_audit True</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  instance_usage_audit_period hour</span><br><span class="line">$ openstack-config --set /etc/nova/nova.conf DEFAULT \</span><br><span class="line">  notify_on_state_change vm_and_task_state</span><br></pre></td></tr></table></figure>
<p>多值的参数，直接修改文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]&#10;...&#10;notification_driver = nova.openstack.common.notifier.rpc_notifier&#10;notification_driver = ceilometer.compute.nova_notifier&#10;... # qpid &#21644;qpid_hostname&#20043;&#21069;&#24050;&#32463;&#37197;&#32622;&#36807;&#65292;&#36825;&#37324;&#37319;&#29992;&#19968;&#26679;</span><br></pre></td></tr></table></figure>
<p>编辑<code>/etc/ceilometer/ceilometer.conf</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf publisher \</span><br><span class="line">  metering_secret <span class="number">711</span>e1a83f278a83de1f8 <span class="comment"># 在ceilometer上用openssl生成的</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf DEFAULT rpc_backend ceilometer.openstack.common.rpc.impl_qpid</span><br><span class="line"><span class="comment"># openstack-config --set /etc/ceilometer/ceilometer.conf DEFAULT qpid_hostname 10.0.100.149</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken auth_host <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_user ceilometer</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken auth_protocol http</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  keystone_authtoken admin_password eb8ed86ef2178168c458</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_username ceilometer</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_tenant_name service</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_password eb8ed86ef2178168c458</span><br><span class="line">$ openstack-config --set /etc/ceilometer/ceilometer.conf \</span><br><span class="line">  service_credentials os_auth_url http://<span class="number">10.0</span>.<span class="number">100.149</span>:<span class="number">5000</span>/v2.<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>重启服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-nova-compute restart</span><br><span class="line">$ service openstack-ceilometer-compute start</span><br><span class="line">$ chkconfig openstack-ceilometer-compute on</span><br></pre></td></tr></table></figure>
<h3 id="给Glance、Cinder、Swift部署Agent：">给Glance、Cinder、Swift部署Agent：</h3><p>在oscontroller上编辑<code>/etc/glance/glance-api.conf</code>，并重启服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/glance/glance-api.conf DEFAULT notification_driver messaging</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf DEFAULT rpc_backend qpid</span><br><span class="line">$ openstack-config --set /etc/glance/glance-api.conf DEFAULT qpid_hostname <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">$ service openstack-glance-api restart</span><br><span class="line">$ service openstack-glance-registry restart</span><br></pre></td></tr></table></figure>
<p>在oscontroller和osceph0上编辑<code>/etc/cinder/cinder.conf</code>，并重启服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ openstack-config --set /etc/cinder/cinder.conf DEFAULT control_exchange cinder</span><br><span class="line">$ openstack-config --set /etc/cinder/cinder.conf DEFAULT notification_driver cinder.openstack.common.notifier.rpc_notifier</span><br><span class="line">$ service openstack-cinder-api restart <span class="comment"># 在oscontoller上</span></span><br><span class="line">$ service openstack-cinder-scheduler restart <span class="comment"># 在oscontroller上</span></span><br><span class="line">$ service openstack-cinder-volume restart <span class="comment"># 在osceph0上</span></span><br></pre></td></tr></table></figure>
<p>在osswift0上安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y python-ceilometer</span><br></pre></td></tr></table></figure>
<p>另，ceilometer需要<code>ResellerAdmin</code>角色来获取数据：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ keystone role-create --name=ResellerAdmin</span><br><span class="line">$ keystone user-role-add --tenant service --user ceilometer \</span><br><span class="line">      --role $(keystone role-list | awk <span class="string">'/ ResellerAdmin / &#123;print $2&#125;'</span>)</span><br></pre></td></tr></table></figure>
<p>在osswift0上修改<code>/etc/swift/proxy-server.conf</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;[filter:ceilometer]&#10;use = egg:ceilometer#swift&#10;...&#10;[pipeline:main]&#10;pipeline = healthcheck cache authtoken keystoneauth ceilometer proxy-server&#10;...</span><br></pre></td></tr></table></figure>
<p>重启<code>openstack-swift-proxy</code>服务:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service openstack-swift-proxy restart</span><br></pre></td></tr></table></figure>
<h3 id="检验ceilometer效果">检验ceilometer效果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ceilometer meter-list</span><br><span class="line">$ glance image-download <span class="string">"cirros-0.3.2-x86_64"</span> &gt; cirros.img <span class="comment"># 下载一个镜像</span></span><br><span class="line">$ ceilometer meter-list</span><br><span class="line">$ ceilometer statistics -m image.download -p <span class="number">60</span></span><br></pre></td></tr></table></figure>
<p>如果遇到采集指标不齐问题，可以检查MQ上的消息队列，可以用<code>qpid-tools</code>工具（其他MQ对应也有其他工具）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum install -y qpid-tools</span><br><span class="line">$ qpid-tool <span class="number">10.0</span>.<span class="number">100.149</span></span><br><span class="line">qpid &gt; list</span><br><span class="line">qpid &gt; list queue/exchange</span><br><span class="line">qpid &gt; show ID_xxx</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>Openstack主要的组件部署不复杂，文档目前也已经比较成熟，只不过涉及到linux和python dev相关内容较多，细节容易出错，多动动手基本也可以很快熟悉起来。但如果要深入内部，还得从log、运行原理等切入，直至跟进组件社区开发状态和进展，非一日之功。</p>
<p>参考：</p>
<ol>
<li><a href="http://docs.openstack.org/icehouse/" title="Openstack docs" target="_blank" rel="external">Openstack docs</a></li>
<li><a href="http://promisejohn.github.io/2015/04/15/PythonDevEnvSetting/" title="Python开发环境搭建">Python开发环境搭建</a></li>
<li><a href="http://techglimpse.com/openstack-installation-errors-solutions/" title="openstack安装错误方案" target="_blank" rel="external">openstack安装错误方案</a></li>
<li><a href="http://www.gossamer-threads.com/lists/openstack/operators/34627" title="Problem configuring openvswitch br-ex" target="_blank" rel="external">Problem configuring openvswitch br-ex</a></li>
<li><a href="https://www.rdoproject.org/Neutron_with_existing_external_network" title="Neutron_with_existing_external_network" target="_blank" rel="external">Neutron_with_existing_external_network</a></li>
<li><a href="http://docs.openstack.org/openstack-ops/content/network_troubleshooting.html" title="Network troubleshooting" target="_blank" rel="external">网络问题排查方法</a></li>
<li><a href="http://docs.openstack.org/admin-guide-cloud/content/under_the_hood_openvswitch.html" title="Networking Openvswitch on Openstack" target="_blank" rel="external">Networking Openvswitch on Openstack</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="参考架构及部署规划">参考架构及部署规划</h2><p><img src="http://docs.openstack.org/icehouse/install-guide/install/yum/content/figures/1/a/common/figures/openstack_havana_conceptual_arch.png" alt="参考架构"></p>
<ul>
<li>操作系统：CentOS6.5</li>
<li>第三方yum源：epel, rdo</li>
</ul>
<p>节点部署角色：</p>
<table>
<thead>
<tr>
<th>节点名</th>
<th>internal ip</th>
<th>public ip</th>
<th>Role</th>
</tr>
</thead>
<tbody>
<tr>
<td>oscontroller</td>
<td>10.0.100.145</td>
<td>192.168.182.150</td>
<td>nova, glance, cinder, image, neutron, dashboard, heat</td>
</tr>
<tr>
<td>osnetwork</td>
<td>10.0.100.146</td>
<td>192.168.182.151</td>
<td>ML2, OVS, L2 Agent, L3 Agent, DHCP Agent</td>
</tr>
<tr>
<td>oscompute1</td>
<td>10.0.100.147</td>
<td>192.168.182.152</td>
<td>nova-compute</td>
</tr>
<tr>
<td>oscompute2</td>
<td>10.0.100.148</td>
<td>192.168.182.153</td>
<td>nova-compute</td>
</tr>
<tr>
<td>oskeystone</td>
<td>10.0.100.149</td>
<td>192.168.182.154</td>
<td>qpid/rabbitmq, keystone, mysql， memcached</td>
</tr>
<tr>
<td>osmeter</td>
<td>10.0.100.150</td>
<td>192.168.182.155</td>
<td>ceilometer, mongodb</td>
</tr>
<tr>
<td>osswift0</td>
<td>10.0.100.139</td>
<td>192.168.182.144</td>
<td>swift0, swift-proxy-server</td>
</tr>
<tr>
<td>osswift1</td>
<td>10.0.100.140</td>
<td>192.168.182.145</td>
<td>swift1</td>
</tr>
<tr>
<td>osswift2</td>
<td>10.0.100.141</td>
<td>192.168.182.146</td>
<td>swift2</td>
</tr>
<tr>
<td>osceph0</td>
<td>10.0.100.142</td>
<td>192.168.182.147</td>
<td>ceph0</td>
</tr>
<tr>
<td>osceph1</td>
<td>10.0.100.143</td>
<td>192.168.182.148</td>
<td>ceph1 # 暂时不用</td>
</tr>
<tr>
<td>osceph2</td>
<td>10.0.100.144</td>
<td>192.168.182.149</td>
<td>ceph2 # 暂时不用</td>
</tr>
</tbody>
</table>
<p><img src="http://docs.openstack.org/icehouse/install-guide/install/yum/content/figures/1/figures/installguide_arch-neutron.png" alt="参考部署架构"></p>]]>
    
    </summary>
    
      <category term="ceilometer" scheme="http://promisejohn.github.io/tags/ceilometer/"/>
    
      <category term="cinder" scheme="http://promisejohn.github.io/tags/cinder/"/>
    
      <category term="glance" scheme="http://promisejohn.github.io/tags/glance/"/>
    
      <category term="neutron" scheme="http://promisejohn.github.io/tags/neutron/"/>
    
      <category term="nova" scheme="http://promisejohn.github.io/tags/nova/"/>
    
      <category term="openstack" scheme="http://promisejohn.github.io/tags/openstack/"/>
    
      <category term="swift" scheme="http://promisejohn.github.io/tags/swift/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ruby开发环境搭建]]></title>
    <link href="http://promisejohn.github.io/2015/04/17/RubyDevEnvSetting/"/>
    <id>http://promisejohn.github.io/2015/04/17/RubyDevEnvSetting/</id>
    <published>2015-04-17T02:48:49.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h3 id="Ruby开发环境搭建">Ruby开发环境搭建</h3><p>多版本管理<code>RVM</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys <span class="number">409</span>B6B1796C275462A1703113804BB82D39DC0E3</span><br><span class="line">$ curl <span class="operator">-s</span>SL https://get.rvm.io | bash <span class="operator">-s</span> stable</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile.d/rvm.sh</span><br><span class="line">$ sed -i <span class="string">'s!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!'</span> <span class="variable">$rvm_path</span>/config/db <span class="comment"># 使用taobao源下载ruby</span></span><br><span class="line">$ rvm list known</span><br><span class="line">$ rvm install <span class="number">2.1</span>.<span class="number">4</span></span><br><span class="line">$ rvm docs generate-ri <span class="comment"># 生成ruby文档</span></span><br><span class="line">$ rvm use <span class="number">2.1</span>.<span class="number">4</span> --default <span class="comment"># 设定默认ruby版本</span></span><br><span class="line">$ rvm list <span class="comment"># 查询已安装版本</span></span><br></pre></td></tr></table></figure>
<p>用<code>gemset</code>建立独立环境：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ rvm use <span class="number">2.1</span>.<span class="number">4</span></span><br><span class="line">$ rvm gemset create rails42</span><br><span class="line">$ rvm use <span class="number">2.1</span>.<span class="number">4</span>@rails42</span><br><span class="line">$ rvm gemset list</span><br></pre></td></tr></table></figure>
<p><code>Gem</code>管理ruby包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem sources --remove https://rubygems.org/</span><br><span class="line">$ gem sources <span class="operator">-a</span> https://ruby.taobao.org/</span><br><span class="line">$ gem sources <span class="operator">-l</span></span><br><span class="line">$ gem search rails <span class="comment"># search，install, etc</span></span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://rvm.io/" title="RVM official site" target="_blank" rel="external">RVM official site</a></li>
<li><a href="https://ruby-china.org/wiki/rvm-guide" title="RVM Guide from ruby-china.org" target="_blank" rel="external">RVM Guide from ruby-china.org</a></li>
<li><a href="http://guides.rubygems.org/rubygems-basics/" title="Gem Official Guide" target="_blank" rel="external">Gem Official Guide</a></li>
<li><a href="http://ruby.taobao.org/" title="Ruby@Taobao.org" target="_blank" rel="external">Ruby@Taobao.org</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Ruby开发环境搭建">Ruby开发环境搭建</h3><p>多版本管理<code>RVM</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span cla]]>
    </summary>
    
      <category term="dev" scheme="http://promisejohn.github.io/tags/dev/"/>
    
      <category term="ruby" scheme="http://promisejohn.github.io/tags/ruby/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Vagrant]]></title>
    <link href="http://promisejohn.github.io/2015/04/17/HelloVagrant/"/>
    <id>http://promisejohn.github.io/2015/04/17/HelloVagrant/</id>
    <published>2015-04-17T02:22:06.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h3 id="Vagrant部署">Vagrant部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/dev</span><br><span class="line">$ wget https://dl.bintray.com/mitchellh/vagrant/vagrant_1.<span class="number">7.2</span>_x86_64.rpm</span><br><span class="line">$ rpm -ivh vagrant_1.<span class="number">7.2</span>_x86_64.rpm</span><br></pre></td></tr></table></figure>
<h3 id="添加vagrant_boxes">添加vagrant boxes</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add hashicorp/precise32 <span class="comment"># 支持virtualbox Hypervisor</span></span><br><span class="line">$ vagrant box add centos64 http://citozin.com/centos64.box ＃ 支持 libvirt KVM Hypervisor</span><br></pre></td></tr></table></figure>
<h3 id="编辑Vagrantfile">编辑Vagrantfile</h3><p>默认使用的是virtualbox作为Hypervisor：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Vagrant</span>.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"hashicorp/precise32"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="运行虚拟机">运行虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure>
<h3 id="Vagrant使用KVM_Hypervisor">Vagrant使用KVM Hypervisor</h3><p>安装vagrant-libvirt plugin：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install libxslt-devel libxml2-devel libvirt-devel</span><br><span class="line">$ vagrant plugin install vagrant-libvirt --plugin-source https://ruby.taobao.org/</span><br></pre></td></tr></table></figure>
<p>配置Vagrantfile：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Vagrant</span>.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.define <span class="symbol">:node1</span> <span class="keyword">do</span> |node1|</span><br><span class="line">    node1.vm.box = <span class="string">"centos64"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>启动虚拟机：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up --provider=libvirt</span><br><span class="line">$ <span class="built_in">export</span> VAGRANT_DEFAULT_PROVIDER=libvirt <span class="comment"># Another way</span></span><br></pre></td></tr></table></figure>
<h3 id="小结">小结</h3><p>Vagrant的box不是对所有hypervisor都通用，比如官方的<code>hashicorp/precise32</code>就不支持KVM，如果环境只有KVM，那么可能需要自己制作对应的box，可以参考<a href="https://github.com/pradels/vagrant-libvirt/" title="Vagrant-Libvirt" target="_blank" rel="external">Vagrant-Libvirt Plugin</a>，借助工具<code>create_box.sh</code>从qcow2 image制作。</p>
<p>此外，需要注意的是，KVM和VirtualBox不能同时启动虚拟机，否则会报类似如下错误：</p>
<p>先启动virtualbox虚拟机再启动KVM虚拟机：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There was an error talking to Libvirt. The error message is shown&#10;below:&#10;&#10;Call to virDomainCreateWithFlags failed: internal error Process exited while reading console log output: char device redirected to /dev/pts/2&#10;kvm_create_vm: Device or resource busy&#10;failed to initialize KVM: Operation not permitted&#10;No accelerator found!</span><br></pre></td></tr></table></figure>
<p>先启动KVM虚拟机再启动virtualbox虚拟机：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The guest machine entered an invalid state while waiting for it&#10;to boot. Valid states are &#39;starting, running&#39;. The machine is in the&#10;&#39;poweroff&#39; state. Please verify everything is configured&#10;properly and try again.&#10;&#10;If the provider you&#39;re using has a GUI that comes with it,&#10;it is often helpful to open that and watch the machine, since the&#10;GUI often has more helpful error messages than Vagrant can retrieve.&#10;For example, if you&#39;re using VirtualBox, run `vagrant up` while the&#10;VirtualBox GUI is open.</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="https://docs.vagrantup.com/v2/" title="Vagrant Official Site" target="_blank" rel="external">Vagrant Official Site</a></li>
<li><a href="https://github.com/pradels/vagrant-libvirt/" title="Vagrant-Libvirt" target="_blank" rel="external">Vagrant-Libvirt Plugin</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Vagrant部署">Vagrant部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span clas]]>
    </summary>
    
      <category term="vagrant" scheme="http://promisejohn.github.io/tags/vagrant/"/>
    
      <category term="虚拟化" scheme="http://promisejohn.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Flocker]]></title>
    <link href="http://promisejohn.github.io/2015/04/16/HelloFlocker/"/>
    <id>http://promisejohn.github.io/2015/04/16/HelloFlocker/</id>
    <published>2015-04-16T15:56:04.000Z</published>
    <updated>2015-06-13T07:06:01.239Z</updated>
    <content type="html"><![CDATA[<h3 id="Flocker安装部署">Flocker安装部署</h3><p>安装flocker-deploy：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv virtualenv flocker</span><br><span class="line">$ pyenv activate flocker</span><br><span class="line">$ pip install https://storage.googleapis.com/archive.clusterhq.com/downloads/flocker/Flocker-<span class="number">0.3</span>.<span class="number">2</span>-py2-none-any.whl</span><br><span class="line">$ <span class="built_in">which</span> flocker-deploy <span class="comment"># 验证flocker-deploy安装在$(dirname `pyenv which python`)目录下</span></span><br></pre></td></tr></table></figure>
<p>安装flocker-node，本地安装方式官方目前只支持fedora 20的linux，暂时选择用最简单的vagrant来测试。</p>
<p>准备第三方库：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line">$ wget http://download.virtualbox.org/virtualbox/rpm/$ rhel/virtualbox.repo <span class="comment"># 导入virtualbox的yum库，修改默认不启用：enabled=0</span></span><br><span class="line">$ wget http://mirrors.zju.edu.cn/epel/<span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm</span><br><span class="line">$ rpm -ivh epel-release-<span class="number">6</span>-<span class="number">8</span>.noarch.rpm <span class="comment"># 导入EPEL库</span></span><br></pre></td></tr></table></figure>
<p>安装VirtualBox：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/dev <span class="comment"># 工作目录</span></span><br><span class="line">$ yum install dkms ＃ 从EPEL安装</span><br><span class="line">$ yum groupinstall <span class="string">"Development Tools"</span> </span><br><span class="line">$ yum install kernel-devel <span class="comment"># 确保当前运行的uname -r与kernel-devel版本一致</span></span><br><span class="line">$ yum --enablerepo virtualbox install VirtualBox-<span class="number">4.3</span></span><br><span class="line">$ /etc/init.d/vboxdrv setup</span><br><span class="line">$ wget http://dlc-cdn.sun.com/virtualbox/<span class="number">4.3</span>.<span class="number">26</span>/Oracle_VM_VirtualBox_Extension_Pack-<span class="number">4.3</span>.<span class="number">26</span>-<span class="number">98988</span>.vbox-extpack</span><br><span class="line">$ VBoxManage extpack install Oracle_VM_VirtualBox_Extension_Pack-<span class="number">4.3</span>.<span class="number">26</span>-<span class="number">98988</span>.vbox-extpack</span><br></pre></td></tr></table></figure>
<p>安装Vagrant：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://dl.bintray.com/mitchellh/vagrant/vagrant_1.<span class="number">7.2</span>_x86_64.rpm</span><br><span class="line">$ rpm -ivh vagrant_1.<span class="number">7.2</span>_x86_64.rpm</span><br><span class="line">$ <span class="built_in">cd</span> ~/dev &amp;&amp; mkdir HelloFlocker &amp;&amp; <span class="built_in">cd</span> <span class="variable">$_</span></span><br><span class="line">$ wget http://flocker.readthedocs.org/en/latest/_downloads/Vagrantfile <span class="comment"># See Below</span></span><br><span class="line">$ vagrant up</span><br><span class="line">$ vagrant status</span><br></pre></td></tr></table></figure>
<p>使用官方的flocker box：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">Vagrant</span>.require_version <span class="string">"&gt;= 1.6.2"</span></span><br><span class="line"><span class="constant">VAGRANTFILE_API_VERSION</span> = <span class="string">"2"</span></span><br><span class="line"><span class="constant">ENV</span>[<span class="string">'VAGRANT_DEFAULT_PROVIDER'</span>] = <span class="string">'virtualbox'</span></span><br><span class="line"><span class="constant">Vagrant</span>.configure(<span class="constant">VAGRANTFILE_API_VERSION</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.box = <span class="string">"clusterhq/flocker-tutorial"</span></span><br><span class="line">  config.vm.box_version = <span class="string">"= 0.3.2"</span></span><br><span class="line">  <span class="keyword">if</span> <span class="constant">Vagrant</span>.has_plugin?(<span class="string">"vagrant-cachier"</span>)</span><br><span class="line">    config.cache.scope = <span class="symbol">:box</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  config.vm.define <span class="string">"node1"</span> <span class="keyword">do</span> |node1|</span><br><span class="line">    node1.vm.network <span class="symbol">:private_network</span>, <span class="symbol">:ip</span> =&gt; <span class="string">"172.16.255.250"</span></span><br><span class="line">    node1.vm.hostname = <span class="string">"node1"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  config.vm.define <span class="string">"node2"</span> <span class="keyword">do</span> |node2|</span><br><span class="line">    node2.vm.network <span class="symbol">:private_network</span>, <span class="symbol">:ip</span> =&gt; <span class="string">"172.16.255.251"</span></span><br><span class="line">    node2.vm.hostname = <span class="string">"node2"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>Flocker使用SSH通道：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> $(ssh-agent) <span class="comment"># 启用一个SSH Agent，可以用ssh-add测试是否启用</span></span><br><span class="line">$ ssh-add ~/.vagrant.d/insecure_private_key</span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.250</span> flocker-reportstate --version <span class="comment"># 检查virtualbox中虚拟机内的flocker-node版本</span></span><br></pre></td></tr></table></figure>
<p>在虚拟机中下载docker比如官方的MySQL案例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.250</span> docker pull mysql:<span class="number">5.6</span>.<span class="number">17</span></span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.251</span> docker pull mysql:<span class="number">5.6</span>.<span class="number">17</span></span><br></pre></td></tr></table></figure>
<h3 id="Flocker部署MySQL:">Flocker部署MySQL:</h3><p>配置<code>mysql-application.yml</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;version&#34;: 1&#10;&#34;applications&#34;:&#10;  &#34;mysql-volume-example&#34;:&#10;    &#34;image&#34;: &#34;mysql:5.6.17&#34;&#10;    &#34;environment&#34;:&#10;      &#34;MYSQL_ROOT_PASSWORD&#34;: &#34;clusterhq&#34;&#10;    &#34;ports&#34;:&#10;    - &#34;internal&#34;: 3306&#10;      &#34;external&#34;: 3306&#10;    &#34;volume&#34;:&#10;      &#34;mountpoint&#34;: &#34;/var/lib/mysql&#34;</span><br></pre></td></tr></table></figure>
<p>配置<code>mysql-deployment.yml</code>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;version&#34;: 1&#10;&#34;nodes&#34;:&#10;  &#34;172.16.255.250&#34;: [&#34;mysql-volume-example&#34;]&#10;  &#34;172.16.255.251&#34;: []</span><br></pre></td></tr></table></figure>
<p>检查docker服务端镜像及容器启用情况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.250</span> docker images</span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.250</span> docker ps</span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.251</span> docker images</span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.251</span> docker ps</span><br></pre></td></tr></table></figure>
<p>通过Flocker-deploy部署应用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv activate flocker <span class="comment"># 确保进入隔离python环境，之前安装的flocker-cli在该环境内</span></span><br><span class="line">$ flocker-deploy mysql-deployment.yml mysql-application.yml</span><br><span class="line">$ ssh root@<span class="number">172.16</span>.<span class="number">255.250</span> docker ps <span class="comment"># 可以看到MySQL容器已启动</span></span><br><span class="line">$ ssh root@<span class="number">172.16</span>.<span class="number">255.251</span> docker ps</span><br></pre></td></tr></table></figure>
<p>使用MySQL服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -uroot -pclusterhq -h172.<span class="number">16.255</span>.<span class="number">250</span></span><br><span class="line">$ <span class="comment"># create some databases, tables and data.</span></span><br><span class="line">$ <span class="comment"># stay in the mysql client and keep connection.</span></span><br></pre></td></tr></table></figure>
<h3 id="通过Flocker-deploy迁移应用：">通过Flocker-deploy迁移应用：</h3><p>新增<code>mysql-deployment-moved.yml</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;version&#34;: 1&#10;&#34;nodes&#34;:&#10;  &#34;172.16.255.250&#34;: []&#10;  &#34;172.16.255.251&#34;: [&#34;mysql-volume-example&#34;]</span><br></pre></td></tr></table></figure>
<p>执行迁移：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ flocker-deploy mysql-deployment-moved.yml mysql-application.yml</span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.250</span> docker ps <span class="comment"># 看到容器列表空</span></span><br><span class="line">$ ssh -t root@<span class="number">172.16</span>.<span class="number">255.251</span> docker ps <span class="comment"># 看到容器启动</span></span><br></pre></td></tr></table></figure>
<p>迁移过程中可以发现，mysql客户端连接的172.16.255.250服务端并没有断开。通过登录虚拟机可以找到原因（有兴趣的可以用tcpdump、ss来追踪）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@<span class="number">172.16</span>.<span class="number">255.250</span></span><br><span class="line">$ root@<span class="number">250</span>: iptables -t nat -L</span><br></pre></td></tr></table></figure>
<p>可以看到flocker是通过Linux Netfilter的NAT表进行了默认的转发：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chain PREROUTING (policy ACCEPT)&#10;target     prot opt source               destination&#10;DOCKER     all  --  anywhere             anywhere             ADDRTYPE match dst-type LOCAL&#10;DNAT       tcp  --  anywhere             anywhere             tcp dpt:mysql ADDRTYPE match dst-type LOCAL /* flocker create_proxy_to */ to:172.16.255.251&#10;&#10;Chain INPUT (policy ACCEPT)&#10;target     prot opt source               destination&#10;&#10;Chain OUTPUT (policy ACCEPT)&#10;target     prot opt source               destination&#10;DOCKER     all  --  anywhere            !loopback/8           ADDRTYPE match dst-type LOCAL&#10;DNAT       tcp  --  anywhere             anywhere             tcp dpt:mysql ADDRTYPE match dst-type LOCAL to:172.16.255.251&#10;&#10;Chain POSTROUTING (policy ACCEPT)&#10;target     prot opt source               destination&#10;MASQUERADE  all  --  172.17.0.0/16        anywhere&#10;MASQUERADE  tcp  --  anywhere             anywhere             tcp dpt:mysql</span><br></pre></td></tr></table></figure>
<p>由此实现了应用的无缝迁移。</p>
<h3 id="小结">小结</h3><p>Flocker实现的功能很有诱惑力，让docker具备了自动化的应用迁移能力，他俩关系有点像openstack和hypervisor的关系。但是，它目前还非常不成熟（0.4版在开发中），经常会遇到一些bug，就连官方也不推荐在生产环境使用，继续观望。</p>
<p>参考：</p>
<ol>
<li><a href="http://flocker.readthedocs.org/en/latest/gettingstarted/installation.html" title="Flocker doc on readthedoc.org" target="_blank" rel="external">Flocker Doc</a></li>
<li><a href="http://promisejohn.github.io/2015/04/15/WebDevEnvSetting/" title="Web开发环境搭建">Web开发环境搭建</a></li>
<li><a href="http://wiki.centos.org/zh/HowTos/Virtualization/VirtualBox" title="CentOS下安装VirtualBox" target="_blank" rel="external">CentOS下安装VirtualBox</a></li>
<li><a href="http://www.cnblogs.com/fsjohnhuang/p/3976331.html" title="CentOS6.5菜鸟之旅：安装VirtualBox4.3" target="_blank" rel="external">CentOS6.5菜鸟之旅：安装VirtualBox4.3</a></li>
<li>在验证应用无缝迁移过程中用到的工具：ss、tcpdump。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Flocker安装部署">Flocker安装部署</h3><p>安装flocker-deploy：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class=]]>
    </summary>
    
      <category term="docker" scheme="http://promisejohn.github.io/tags/docker/"/>
    
      <category term="flocker" scheme="http://promisejohn.github.io/tags/flocker/"/>
    
      <category term="vagrant" scheme="http://promisejohn.github.io/tags/vagrant/"/>
    
      <category term="虚拟化" scheme="http://promisejohn.github.io/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SaltStack开发环境搭建]]></title>
    <link href="http://promisejohn.github.io/2015/04/16/SaltStackDev/"/>
    <id>http://promisejohn.github.io/2015/04/16/SaltStackDev/</id>
    <published>2015-04-16T03:08:18.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h3 id="安装及准备">安装及准备</h3><p>切换到python独立环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv virtualenv salt-<span class="number">2.7</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>获取代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/saltstack/salt</span><br><span class="line">$ git fetch --tags</span><br></pre></td></tr></table></figure>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ env SWIG_FEATURES=<span class="string">"-cpperraswarn -includeall -D__`uname -m`__ -I/usr/include/openssl"</span> pip install M2Crypto</span><br><span class="line">$ pip install pyzmq PyYAML pycrypto msgpack-python jinja2 psutil</span><br><span class="line">$ pip install <span class="operator">-e</span> ./salt</span><br></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p $(dirname `pyenv which python`)/../etc/salt&#10;$ cp ./salt/conf/master ./salt/conf/minion $(dirname `pyenv which python`)/../etc/salt</span><br></pre></td></tr></table></figure>
<p>master配置文件：</p>
<ol>
<li>user: root</li>
<li>root_dir: $(dirname <code>pyenv which python</code>)/..</li>
<li>pidfile: $(dirname <code>pyenv which python</code>)/../salt-master.pid</li>
<li>publish_port: 14505</li>
<li>ret_port: 14506</li>
</ol>
<p>minion配置文件：</p>
<ol>
<li>user: root</li>
<li>root_dir: $(dirname <code>pyenv which python</code>)/..</li>
<li>pidfile: $(dirname <code>pyenv which python</code>)/../salt-minion.pid</li>
<li>master: localhost</li>
<li>id: saltdev</li>
<li>master_port: 14505</li>
</ol>
<p>运行启动：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> $(dirname `pyenv <span class="built_in">which</span> python`)/../</span><br><span class="line">$ salt-master -c ./etc/salt <span class="operator">-d</span></span><br><span class="line">$ salt-minion -c ./etc/salt <span class="operator">-d</span></span><br><span class="line">$ salt-key -c ./etc/salt -L</span><br><span class="line">$ salt-key -c ./etc/salt -A</span><br><span class="line">$ salt -c ./etc/salt <span class="string">'*'</span> test.ping</span><br></pre></td></tr></table></figure>
<p>其他：</p>
<ol>
<li>通过<code>-l debug</code>开启debug模式，去掉<code>-d</code>直接输出到console。</li>
<li>socket path在linux上最多107个字符，可以通过缩短sock_dir和root_dir字符。</li>
<li><code>ulimit -n</code>检查File descriptor limites，至少2047：<code>ulimit -n 2048</code></li>
</ol>
<h3 id="文档生成">文档生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install Sphinx==<span class="number">1.3</span>b2</span><br><span class="line">$ <span class="built_in">cd</span> doc; make html</span><br><span class="line">$ <span class="built_in">cd</span> _build/html; python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>
<h3 id="Tests">Tests</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./setup.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h4 id="参考：">参考：</h4><ol>
<li><a href="http://docs.saltstack.com/en/latest/topics/development/hacking.html" title="saltstack官方文档" target="_blank" rel="external">saltstack官方文档</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="安装及准备">安装及准备</h3><p>切换到python独立环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><]]>
    </summary>
    
      <category term="dev" scheme="http://promisejohn.github.io/tags/dev/"/>
    
      <category term="saltstack" scheme="http://promisejohn.github.io/tags/saltstack/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python开发环境搭建]]></title>
    <link href="http://promisejohn.github.io/2015/04/15/PythonDevEnvSetting/"/>
    <id>http://promisejohn.github.io/2015/04/15/PythonDevEnvSetting/</id>
    <published>2015-04-15T08:03:04.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h3 id="Python开发环境搭建">Python开发环境搭建</h3><p>用豆瓣的源给pip和easy_install加速，~/.bashrc：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias easy_install=&#39;easy_install -i http://pypi.douban.com/simple&#39;</span><br></pre></td></tr></table></figure>
<p>安装pip：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ easy_install pip</span><br></pre></td></tr></table></figure>
<p>~/.pip/pip.conf：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[global]&#10;index-url = http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure>
<p>安装pyenv</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv&#10;$ echo &#39;export PYENV_ROOT=&#34;$HOME/.pyenv&#34;&#39; &#62;&#62; ~/.bashrc&#10;$ echo &#39;export PATH=&#34;$PYENV_ROOT/bin:$PATH&#34;&#39; &#62;&#62; ~/.bashrc&#10;$ echo &#39;eval &#34;$(pyenv init -)&#34;&#39; &#62;&#62; ~/.bashrc&#10;$ exec $SHELL -l&#10;$ export PYTHON_BUILD_MIRROR_URL=&#34;http://pyenv.qiniudn.com/pythons/&#34; #&#21152;&#36895;, Official: http://yyuu.github.io/pythons/</span><br></pre></td></tr></table></figure>
<p>安装pyenv-virtualenv plugin：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv&#10;$ echo &#39;eval &#34;$(pyenv virtualenv-init -)&#34;&#39; &#62;&#62; ~/.bash_profile&#10;$ exec &#34;$SHELL&#34;</span><br></pre></td></tr></table></figure>
<p>安装centOS系统开发环境工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum groupinstall -y &#34;Development Tools&#34;&#10;$ yum install -y readline readline-devel readline-static openssl openssl-devel openssl-static sqlite-devel bzip2-devel bzip2-libs</span><br></pre></td></tr></table></figure>
<p>安装隔离的python环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install --list&#10;$ pyenv install 2.7.8&#10;$ pyenv rehash</span><br></pre></td></tr></table></figure>
<p>查看切换版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions&#10;$ pyenv global 2.7.8 #OR Use: pyenv local 2.7.8</span><br></pre></td></tr></table></figure>
<p>新建环境，检查环境列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv virtualenv 2.7.8 my-2.7.8 &#65283;OR from current version: pyenv virtualenv venv34&#10;$ pyenv virtualenvs</span><br></pre></td></tr></table></figure>
<p>Activate环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate &#60;name&#62;&#10;pyenv deactivate</span><br></pre></td></tr></table></figure>
<p>卸载环境，与卸载某个python版本相同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv uninstall my-virtual-env</span><br></pre></td></tr></table></figure>
<p>相关变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PYENV_VIRTUALENV_CACHE_PATH&#10;VIRTUALENV_VERSION&#10;EZ_SETUP/GET_PIP # use ez_setup.py and get_pip.py from the specified location.&#10;EZ_SETUP_URL/GET_PIP_URL # download ez_setup.py and get_pip.py from the specified URL.&#10;SETUPTOOLS_VERSION/PIP_VERSION # install the specified version of setuptools and pip.</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="http://seisman.info/python-pyenv.html" title="Python多版本共存之pyenv" target="_blank" rel="external">Python多版本共存之pyenv</a></li>
<li><a href="http://www.cnblogs.com/npumenglei/p/3719412.html" title="用pyenv 和 virtualenv 搭建单机多版本python 虚拟开发环境" target="_blank" rel="external">用pyenv 和 virtualenv 搭建单机多版本python 虚拟开发环境</a></li>
<li><a href="https://github.com/yyuu/pyenv-virtualenv" title="pyenv-virtualenv Official site" target="_blank" rel="external">pyenv-virtualenv Official site</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Python开发环境搭建">Python开发环境搭建</h3><p>用豆瓣的源给pip和easy_install加速，~/.bashrc：</p>
<figure class="highlight plain"><table><tr><td class="gutt]]>
    </summary>
    
      <category term="dev" scheme="http://promisejohn.github.io/tags/dev/"/>
    
      <category term="python" scheme="http://promisejohn.github.io/tags/python/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux时区设置]]></title>
    <link href="http://promisejohn.github.io/2015/04/15/LinuxTimeZoneConf/"/>
    <id>http://promisejohn.github.io/2015/04/15/LinuxTimeZoneConf/</id>
    <published>2015-04-15T07:13:59.000Z</published>
    <updated>2015-06-13T07:06:01.243Z</updated>
    <content type="html"><![CDATA[<h3 id="更改/etc/localtime">更改/etc/localtime</h3><p>删除/etc/localtime：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm -f /etc/localtime</span><br></pre></td></tr></table></figure>
<p>比如选择中国上海时区，重新做个软链接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<h3 id="配置NTP服务器">配置NTP服务器</h3><p>修改/etc/ntp.conf：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...&#10;restrict 10.0.100.0 mask 255.255.255.0 nomodify #&#20801;&#35768;&#26576;&#32593;&#27573;&#23458;&#25143;&#31471;&#35775;&#38382;&#10;...&#10;server s1a.time.edu.cn #&#20351;&#29992;&#25945;&#32946;&#32593;&#20869;&#26102;&#38388;&#28304;&#10;server 127.127.1.0 &#65283;&#26412;&#22320;&#26102;&#38047;&#65292;&#24403;&#26029;&#32593;&#26102;&#20445;&#35777;&#21516;&#27493;&#10;fudge 127.127.1.0 stratum 10&#10;...</span><br></pre></td></tr></table></figure>
<p>启动ntpd服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ service ntpd start</span><br></pre></td></tr></table></figure>
<p>客户端同步时间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ntpdate 10.0.100.6</span><br></pre></td></tr></table></figure>
<p>可以用crontab定时同步，如每2小时同步一次，crontab -e：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 */2 * * * /usr/sbin/ntpdate 10.0.100.6</span><br></pre></td></tr></table></figure>
<p>参考：</p>
<ol>
<li><a href="http://dngood.blog.51cto.com/446195/662451" title="linux下超简单的ntp时间服务器" target="_blank" rel="external">linux下超简单的ntp时间服务器</a></li>
<li><a href="http://yangqijun.iteye.com/blog/1173016" title="Linux下crontab的使用" target="_blank" rel="external">Linux下crontab的使用</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="更改/etc/localtime">更改/etc/localtime</h3><p>删除/etc/localtime：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><]]>
    </summary>
    
      <category term="linux" scheme="http://promisejohn.github.io/tags/linux/"/>
    
      <category term="Tech" scheme="http://promisejohn.github.io/categories/Tech/"/>
    
  </entry>
  
</feed>